diff --git a/src/buffer.c b/src/buffer.c
index ed16bfe..20ae380 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright 2001.2002 Red Hat, Inc.
  *
@@ -37,6 +38,7 @@ struct _vte_real_buffer {
 static void
 _vte_buffer_check(struct _vte_buffer *buffer, size_t length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_real_buffer *buf = (struct _vte_real_buffer*) buffer;
 	if (length > 0) {
 		g_assert(buf->bytes != NULL);
@@ -51,12 +53,14 @@ _vte_buffer_check(struct _vte_buffer *buffer, size_t length)
 static size_t
 _vte_buffer_calc_new_size(size_t minimum_length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return minimum_length + VTE_BUFFER_FUDGE_SIZE;
 }
 
 struct _vte_buffer*
 _vte_buffer_new(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_real_buffer *buf;
 	buf = g_slice_new(struct _vte_real_buffer);
 	buf->buf_used = buf->buf_length = 0;
@@ -67,6 +71,7 @@ _vte_buffer_new(void)
 struct _vte_buffer*
 _vte_buffer_new_with_data(gconstpointer data, size_t length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_buffer *buf;
 	buf = _vte_buffer_new();
 	_vte_buffer_append(buf, data, length);
@@ -76,6 +81,7 @@ _vte_buffer_new_with_data(gconstpointer data, size_t length)
 void
 _vte_buffer_set_minimum_size(struct _vte_buffer *buffer, size_t length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_real_buffer *buf = (struct _vte_real_buffer*) buffer;
 	size_t size;
 	unsigned char *tmp;
@@ -101,6 +107,7 @@ void
 _vte_buffer_prepend(struct _vte_buffer *buffer,
 		    gconstpointer bytes, size_t length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_real_buffer *buf = (struct _vte_real_buffer*) buffer;
 	size_t size;
 	unsigned char *tmp;
@@ -129,6 +136,7 @@ void
 _vte_buffer_append(struct _vte_buffer *buffer,
 		   gconstpointer bytes, size_t length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_real_buffer *buf = (struct _vte_real_buffer*) buffer;
 	size_t size;
 	unsigned char *tmp;
@@ -155,6 +163,7 @@ _vte_buffer_append(struct _vte_buffer *buffer,
 void
 _vte_buffer_consume(struct _vte_buffer *buffer, size_t length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_real_buffer *buf = (struct _vte_real_buffer*) buffer;
 	_vte_buffer_check(buffer, length);
 	if (length == buf->buf_used) {
@@ -170,6 +179,7 @@ _vte_buffer_consume(struct _vte_buffer *buffer, size_t length)
 void
 _vte_buffer_clear(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_real_buffer *buf = (struct _vte_real_buffer*) buffer;
 	_vte_buffer_check(buffer, 0);
 	buf->buf_used = 0;
@@ -178,6 +188,7 @@ _vte_buffer_clear(struct _vte_buffer *buffer)
 void
 _vte_buffer_free(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_real_buffer *buf = (struct _vte_real_buffer*) buffer;
 	_vte_buffer_check(buffer, 0);
 	g_free(buf->bytes);
@@ -187,6 +198,7 @@ _vte_buffer_free(struct _vte_buffer *buffer)
 size_t
 _vte_buffer_length(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_real_buffer *buf = (struct _vte_real_buffer*) buffer;
 	_vte_buffer_check(buffer, 0);
 	return buf->buf_used;
@@ -195,6 +207,7 @@ _vte_buffer_length(struct _vte_buffer *buffer)
 void
 _vte_buffer_append_guint16(struct _vte_buffer *buffer, guint16 i)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint16 j;
 	j = g_htons(i);
 	_vte_buffer_append(buffer, (gpointer) &j, sizeof(j));
@@ -203,6 +216,7 @@ _vte_buffer_append_guint16(struct _vte_buffer *buffer, guint16 i)
 guint16
 _vte_buffer_peek_guint16(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint16 i;
 	_vte_buffer_check(buffer, sizeof(i));
 	memcpy(&i, buffer->bytes, sizeof(i));
@@ -212,6 +226,7 @@ _vte_buffer_peek_guint16(struct _vte_buffer *buffer)
 guint16
 _vte_buffer_read_guint16(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint16 ret;
 	ret = _vte_buffer_peek_guint16(buffer);
 	_vte_buffer_consume(buffer, sizeof(ret));
@@ -221,6 +236,7 @@ _vte_buffer_read_guint16(struct _vte_buffer *buffer)
 void
 _vte_buffer_append_guint32(struct _vte_buffer *buffer, guint32 i)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint32 j;
 	j = g_htonl(i);
 	_vte_buffer_append(buffer, (gpointer) &j, sizeof(j));
@@ -229,6 +245,7 @@ _vte_buffer_append_guint32(struct _vte_buffer *buffer, guint32 i)
 guint32
 _vte_buffer_peek_guint32(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint32 i;
 	_vte_buffer_check(buffer, sizeof(i));
 	memcpy(&i, buffer->bytes, sizeof(i));
@@ -238,6 +255,7 @@ _vte_buffer_peek_guint32(struct _vte_buffer *buffer)
 guint32
 _vte_buffer_read_guint32(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint32 ret;
 	ret = _vte_buffer_peek_guint32(buffer);
 	_vte_buffer_consume(buffer, sizeof(ret));
@@ -247,6 +265,7 @@ _vte_buffer_read_guint32(struct _vte_buffer *buffer)
 void
 _vte_buffer_append_gstring(struct _vte_buffer *buffer, const GString *s)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_buffer_append_guint32(buffer, s->len);
 	_vte_buffer_append(buffer, s->str, s->len);
 }
@@ -254,6 +273,7 @@ _vte_buffer_append_gstring(struct _vte_buffer *buffer, const GString *s)
 GString *
 _vte_buffer_peek_gstring(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GString *ret;
 	guint32 i;
 	i = _vte_buffer_peek_guint32(buffer);
@@ -265,6 +285,7 @@ _vte_buffer_peek_gstring(struct _vte_buffer *buffer)
 GString *
 _vte_buffer_read_gstring(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GString *ret;
 	ret = _vte_buffer_peek_gstring(buffer);
 	_vte_buffer_consume(buffer, sizeof(guint32) + ret->len);
@@ -274,6 +295,7 @@ _vte_buffer_read_gstring(struct _vte_buffer *buffer)
 void
 _vte_buffer_append_buffer(struct _vte_buffer *buffer, struct _vte_buffer *s)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_real_buffer *buf = (struct _vte_real_buffer*) s;
 	_vte_buffer_append_guint32(buffer, buf->buf_used);
 	_vte_buffer_append(buffer, buf->bytes, buf->buf_used);
@@ -283,12 +305,14 @@ void
 _vte_buffer_append_buffer_contents(struct _vte_buffer *buffer,
 				   struct _vte_buffer *s)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_buffer_append(buffer, s->bytes, _vte_buffer_length(s));
 }
 
 struct _vte_buffer *
 _vte_buffer_peek_buffer(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_buffer *ret;
 	guint32 i;
 	i = _vte_buffer_peek_guint32(buffer);
@@ -300,6 +324,7 @@ _vte_buffer_peek_buffer(struct _vte_buffer *buffer)
 struct _vte_buffer *
 _vte_buffer_read_buffer(struct _vte_buffer *buffer)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_buffer *ret;
 	guint32 i;
 	i = _vte_buffer_read_guint32(buffer);
@@ -313,6 +338,7 @@ _vte_buffer_read_buffer(struct _vte_buffer *buffer)
 int
 main(int argc, char **argv)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_buffer *buffer, *tmp;
 	GString *string;
 	guint16 i16 = 0x1632;
diff --git a/src/caps.c b/src/caps.c
index 0f2c95b..5ab4493 100644
--- a/src/caps.c
+++ b/src/caps.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2001,2002 Red Hat, Inc.
  *
@@ -571,6 +572,7 @@ struct _vte_capability_string _vte_xterm_capability_strings[] = {
 void
 _vte_capability_init(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned int i;
 	for (i = 0; _vte_terminal_capability_strings[i].capability[0]; i++) {
 		const char *tmp;
diff --git a/src/debug.c b/src/debug.c
index 2810087..9e08914 100644
--- a/src/debug.c
+++ b/src/debug.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2002,2003 Red Hat, Inc.
  *
@@ -26,6 +27,7 @@ VteDebugFlags _vte_debug_flags;
 void
 _vte_debug_init(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 #ifdef VTE_DEBUG
   const GDebugKey keys[] = {
     { "misc",         VTE_DEBUG_MISC         },
diff --git a/src/iso2022.c b/src/iso2022.c
index d727cb4..47a5ba5 100644
--- a/src/iso2022.c
+++ b/src/iso2022.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2002,2003 Red Hat, Inc.
  *
@@ -281,6 +282,7 @@ static const struct _vte_iso2022_map _vte_iso2022_map_wide_G[] = {
 static gint
 _vte_direct_compare(gconstpointer a, gconstpointer b)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return GPOINTER_TO_INT(a) - GPOINTER_TO_INT(b);
 }
 
@@ -289,6 +291,7 @@ _vte_direct_compare(gconstpointer a, gconstpointer b)
 static int
 _vte_iso2022_ambiguous_width_guess(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	static int guess;
 	if (G_UNLIKELY (guess == 0)) {
 		const char *lang = NULL;
@@ -320,6 +323,7 @@ _vte_iso2022_ambiguous_width_guess(void)
 static int
 _vte_iso2022_ambiguous_width(struct _vte_iso2022_state *state)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	const char wide_codelist[][10] = {
 		"big5",
 		"big5hkscs",
@@ -380,6 +384,7 @@ _vte_iso2022_ambiguous_width(struct _vte_iso2022_state *state)
 static inline gboolean
 _vte_iso2022_is_ambiguous(gunichar c)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (G_LIKELY (c < 0x80))
 		return FALSE;
 	if (G_UNLIKELY (g_unichar_iszerowidth (c)))
@@ -391,6 +396,7 @@ int
 _vte_iso2022_unichar_width(struct _vte_iso2022_state *state,
 			   gunichar c)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (G_LIKELY (c < 0x80))
 		return 1;
 	if (G_UNLIKELY (g_unichar_iszerowidth (c)))
@@ -407,6 +413,7 @@ _vte_iso2022_unichar_width(struct _vte_iso2022_state *state,
 static GHashTable *
 _vte_iso2022_map_init(const struct _vte_iso2022_map *map, gssize length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GHashTable *ret;
 	int i;
 	if (length == 0) {
@@ -426,6 +433,7 @@ _vte_iso2022_map_get(gunichar mapname,
 		     GHashTable **_map, guint *bytes_per_char, guint *force_width,
 		     gulong *or_mask, gulong *and_mask)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	static VteTree *maps = NULL;
 	struct _vte_iso2022_map _vte_iso2022_map_NUL[256];
 	gint bytes = 0, width = 0;
@@ -738,6 +746,7 @@ _vte_iso2022_map_get(gunichar mapname,
 int
 _vte_iso2022_get_encoded_width(gunichar c)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int width;
 	width = (c & VTE_ISO2022_ENCODED_WIDTH_MASK) >> VTE_ISO2022_ENCODED_WIDTH_BIT_OFFSET;
 	return CLAMP(width, 0, 2);
@@ -746,6 +755,7 @@ _vte_iso2022_get_encoded_width(gunichar c)
 static gunichar
 _vte_iso2022_set_encoded_width(gunichar c, int width)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	width = CLAMP(width, 0, 2);
 	c &= ~(VTE_ISO2022_ENCODED_WIDTH_MASK);
 	c |= (width << VTE_ISO2022_ENCODED_WIDTH_BIT_OFFSET);
@@ -757,6 +767,7 @@ _vte_iso2022_state_new(const char *native_codeset,
 		       _vte_iso2022_codeset_changed_cb_fn fn,
 		       gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_iso2022_state *state;
 	state = g_slice_new0(struct _vte_iso2022_state);
 	state->nrc_enabled = TRUE;
@@ -801,6 +812,7 @@ _vte_iso2022_state_new(const char *native_codeset,
 void
 _vte_iso2022_state_free(struct _vte_iso2022_state *state)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_buffer_free(state->buffer);
 	if (state->conv != VTE_INVALID_CONV) {
 		_vte_conv_close(state->conv);
@@ -812,6 +824,7 @@ void
 _vte_iso2022_state_set_codeset(struct _vte_iso2022_state *state,
 			       const char *codeset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteConv conv;
 
 	g_return_if_fail(state != NULL);
@@ -836,12 +849,14 @@ _vte_iso2022_state_set_codeset(struct _vte_iso2022_state *state,
 const char *
 _vte_iso2022_state_get_codeset(struct _vte_iso2022_state *state)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return state->codeset;
 }
 
 static const guchar *
 _vte_iso2022_find_nextctl(const guchar *p, const guchar * const q)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	do {
 		switch (*p) {
 			case '\033':
@@ -865,6 +880,7 @@ _vte_iso2022_find_nextctl(const guchar *p, const guchar * const q)
 static long
 _vte_iso2022_sequence_length(const unsigned char *nextctl, gsize length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long sequence_length = -1;
 	gsize i;
 
@@ -1071,6 +1087,7 @@ process_8_bit_sequence(struct _vte_iso2022_state *state,
 		       const guchar **inbuf, gsize *inbytes,
 		       gunichar **outbuf, gsize *outbytes)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint i, width;
 	gpointer p;
 	gunichar c, *outptr;
@@ -1148,6 +1165,7 @@ static glong
 process_cdata(struct _vte_iso2022_state *state, const guchar *cdata, gsize length,
 	      GArray *gunichars)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int ambiguous_width;
 	glong processed = 0;
 	GHashTable *map;
@@ -1314,6 +1332,7 @@ gunichar
 _vte_iso2022_process_single(struct _vte_iso2022_state *state,
 			    gunichar c, gunichar map)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GHashTable *hash;
 	gunichar ret = c;
 	gpointer p;
@@ -1341,6 +1360,7 @@ static void
 process_control(struct _vte_iso2022_state *state, guchar *ctl, gsize length,
 		GArray *gunichars)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gunichar c;
 	gsize i;
 	if (length >= 1) {
@@ -1619,6 +1639,7 @@ process_block (struct _vte_iso2022_state *state,
 	       gboolean last,
 	       GArray *gunichars)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint preserve_last = -1;
 	guint initial;
 
@@ -1688,6 +1709,7 @@ _vte_iso2022_process(struct _vte_iso2022_state *state,
 		     guchar *input, gsize length,
 		     GArray *gunichars)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_iso2022_block block;
 	guint preserve_last = -1;
 	const guchar *nextctl, *p, *q;
@@ -1763,6 +1785,7 @@ _vte_iso2022_process(struct _vte_iso2022_state *state,
 int
 main(int argc, char **argv)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_buffer *buffer;
 	struct _vte_iso2022_state *state;
 	GString *string;
diff --git a/src/keymap.c b/src/keymap.c
index 128c5c4..f9aa1e6 100644
--- a/src/keymap.c
+++ b/src/keymap.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2002,2003 Red Hat, Inc.
  *
@@ -51,6 +52,7 @@
 static const char *
 _vte_keysym_name(guint keyval)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	switch (keyval) {
 #include "keysyms.c"
 		default:
@@ -66,6 +68,7 @@ _vte_keysym_print(guint keyval,
 		gboolean legacy_mode,
 		gboolean vt220_mode)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_printerr("Mapping ");
 	if (modifiers & GDK_CONTROL_MASK) {
 		g_printerr("Control+");
@@ -123,6 +126,7 @@ _vte_keysym_print(guint keyval,
 		gboolean legacy_mode,
 		gboolean vt220_mode)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 }
 #endif
 
@@ -1001,6 +1005,7 @@ _vte_keymap_map(guint keyval,
 		gssize *normal_length,
 		const char **special)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gsize i;
 	const struct _vte_keymap_entry *entries;
 	enum _vte_cursor_mode cursor_mode;
@@ -1212,6 +1217,7 @@ _vte_keymap_map(guint keyval,
 gboolean
 _vte_keymap_key_is_modifier(guint keyval)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean modifier = FALSE;
 	/* Determine if this is just a modifier key. */
 	switch (keyval) {
@@ -1255,6 +1261,7 @@ _vte_keymap_key_is_modifier(guint keyval)
 static gboolean
 _vte_keymap_key_gets_modifiers(guint keyval)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean fkey = FALSE;
 	/* Determine if this key gets modifiers. */
 	switch (keyval) {
@@ -1322,6 +1329,7 @@ _vte_keymap_key_gets_modifiers(guint keyval)
 static gboolean
 is_cursor_key(guint keyval)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	switch (keyval) {
 	case GDK_Home:
 	case GDK_Left:
@@ -1354,6 +1362,7 @@ _vte_keymap_key_add_key_modifiers(guint keyval,
 				  char **normal,
 				  gssize *normal_length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int modifier, offset;
 	char *nnormal;
 	GdkModifierType significant_modifiers;
diff --git a/src/matcher.c b/src/matcher.c
index 723cbaa..1015e63 100644
--- a/src/matcher.c
+++ b/src/matcher.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2002 Red Hat, Inc.
  *
@@ -48,6 +49,7 @@ _vte_matcher_add(const struct _vte_matcher *matcher,
 		 const char *pattern, gssize length,
 		 const char *result, GQuark quark)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	matcher->impl->klass->add(matcher->impl, pattern, length, result, quark);
 }
 
@@ -56,6 +58,7 @@ static void
 _vte_matcher_init(struct _vte_matcher *matcher, const char *emulation,
 		  struct _vte_termcap *termcap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	const char *code, *value;
 	gboolean found_cr = FALSE, found_lf = FALSE;
 	gssize stripped_length;
@@ -128,6 +131,7 @@ _vte_matcher_init(struct _vte_matcher *matcher, const char *emulation,
 static gpointer
 _vte_matcher_create(gpointer key)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	char *emulation = key;
 	struct _vte_matcher *ret = NULL;
 
@@ -151,6 +155,7 @@ _vte_matcher_create(gpointer key)
 static void
 _vte_matcher_destroy(gpointer value)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_matcher *matcher = value;
 
 	_vte_debug_print(VTE_DEBUG_LIFECYCLE, "_vte_matcher_destroy()\n");
@@ -166,6 +171,7 @@ _vte_matcher_destroy(gpointer value)
 struct _vte_matcher *
 _vte_matcher_new(const char *emulation, struct _vte_termcap *termcap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_matcher *ret = NULL;
 	g_static_mutex_lock(&_vte_matcher_mutex);
 
@@ -196,6 +202,7 @@ _vte_matcher_new(const char *emulation, struct _vte_termcap *termcap)
 void
 _vte_matcher_free(struct _vte_matcher *matcher)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(_vte_matcher_cache != NULL);
 	g_static_mutex_lock(&_vte_matcher_mutex);
 	g_cache_remove(_vte_matcher_cache, matcher);
@@ -209,6 +216,7 @@ _vte_matcher_match(struct _vte_matcher *matcher,
 		   const char **res, const gunichar **consumed,
 		   GQuark *quark, GValueArray **array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (G_UNLIKELY (array != NULL && matcher->free_params != NULL)) {
 		*array = matcher->free_params;
 		matcher->free_params = NULL;
@@ -221,6 +229,7 @@ _vte_matcher_match(struct _vte_matcher *matcher,
 void
 _vte_matcher_print(struct _vte_matcher *matcher)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	matcher->impl->klass->print(matcher->impl);
 }
 
@@ -231,6 +240,7 @@ void
 _vte_matcher_free_params_array(struct _vte_matcher *matcher,
 		               GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint i;
 	for (i = 0; i < params->n_values; i++) {
 		GValue *value = &params->values[i];
diff --git a/src/pty.c b/src/pty.c
index 4d90bb9..ecc94e8 100644
--- a/src/pty.c
+++ b/src/pty.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2001,2002 Red Hat, Inc.
  *
@@ -69,6 +70,7 @@ static GTree *_vte_pty_helper_map = NULL;
 static void
 _vte_pty_reset_signal_handlers(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	signal(SIGHUP,  SIG_DFL);
 	signal(SIGINT,  SIG_DFL);
 	signal(SIGILL,  SIG_DFL);
@@ -157,6 +159,7 @@ struct vte_pty_child_setup_data {
 static void
 vte_pty_child_setup (gpointer arg)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_pty_child_setup_data *data = arg;
 	int fd = -1;
 	const char *tty = NULL;
@@ -261,6 +264,7 @@ vte_pty_child_setup (gpointer arg)
 static void
 collect_variables (char *name, char *value, GPtrArray *array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_ptr_array_add (array,
 			g_strconcat (name, "=", value, NULL));
 }
@@ -268,6 +272,7 @@ collect_variables (char *name, char *value, GPtrArray *array)
 static gchar **
 merge_environ (char **envp)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GHashTable *table;
 	gchar **parent_environ;
 	GPtrArray *array;
@@ -309,6 +314,7 @@ _vte_pty_run_on_pty (struct vte_pty_child_setup_data *data,
 		     const char *directory,
 		     GPid *pid, GError **error)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean ret = TRUE;
 	GError *local_error = NULL;
 
@@ -409,6 +415,7 @@ _vte_pty_fork_on_pty_name (const char *path, int parent_fd, char **envp,
 			   const char *directory,
 			   int columns, int rows, GPid *child)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_pty_child_setup_data data;
 
 	data.mode = TTY_OPEN_BY_NAME;
@@ -433,6 +440,7 @@ _vte_pty_fork_on_pty_fd (int fd, char **envp,
 			 const char *directory,
 			 int columns, int rows, GPid *child)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_pty_child_setup_data data;
 
 	data.mode = TTY_OPEN_BY_FD;
@@ -463,6 +471,7 @@ _vte_pty_fork_on_pty_fd (int fd, char **envp,
 int
 _vte_pty_set_size(int master, int columns, int rows)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct winsize size;
 	int ret;
 	memset(&size, 0, sizeof(size));
@@ -493,6 +502,7 @@ _vte_pty_set_size(int master, int columns, int rows)
 int
 _vte_pty_get_size(int master, int *columns, int *rows)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct winsize size;
 	int ret;
 	memset(&size, 0, sizeof(size));
@@ -518,6 +528,7 @@ _vte_pty_get_size(int master, int *columns, int *rows)
 static char *
 _vte_pty_ptsname(int master)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 #if defined(HAVE_PTSNAME_R)
 	gsize len = 1024;
 	char *buf = NULL;
@@ -559,6 +570,7 @@ _vte_pty_ptsname(int master)
 static int
 _vte_pty_getpt(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int fd, flags;
 #ifdef HAVE_GETPT
 	/* Call the system's function for allocating a pty. */
@@ -580,6 +592,7 @@ _vte_pty_getpt(void)
 static int
 _vte_pty_grantpt(int master)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 #ifdef HAVE_GRANTPT
 	return grantpt(master);
 #else
@@ -590,6 +603,7 @@ _vte_pty_grantpt(int master)
 static int
 _vte_pty_unlockpt(int fd)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 #ifdef HAVE_UNLOCKPT
 	return unlockpt(fd);
 #elif defined(TIOCSPTLCK)
@@ -605,6 +619,7 @@ _vte_pty_open_unix98(GPid *child, char **env_add,
 		     const char *command, char **argv,
 		     const char *directory, int columns, int rows)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int fd;
 	char *buf;
 
@@ -641,6 +656,7 @@ _vte_pty_open_unix98(GPid *child, char **env_add,
 static void
 _vte_pty_read_ptypair(int tunnel, int *parentfd, int *childfd)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i, ret;
 	char control[LINE_MAX], iobuf[LINE_MAX];
 	struct cmsghdr *cmsg;
@@ -684,6 +700,7 @@ _vte_pty_read_ptypair(int tunnel, int *parentfd, int *childfd)
 static void
 _vte_pty_read_ptypair(int tunnel, int *parentfd, int *childfd)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i;
 	if (ioctl(tunnel, I_RECVFD, &i) == -1) {
 		return;
@@ -700,6 +717,7 @@ _vte_pty_read_ptypair(int tunnel, int *parentfd, int *childfd)
 static int
 _vte_pty_pipe_open(int *a, int *b)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int p[2], ret = -1;
 #ifdef PF_UNIX
 #ifdef SOCK_STREAM
@@ -721,6 +739,7 @@ _vte_pty_pipe_open(int *a, int *b)
 static int
 _vte_pty_pipe_open(int *a, int *b)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int p[2], ret = -1;
 
 	ret = pipe(p);
@@ -737,6 +756,7 @@ _vte_pty_pipe_open(int *a, int *b)
 static ssize_t
 n_read(int fd, void *buffer, size_t count)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	size_t n = 0;
 	char *buf = buffer;
 	int i;
@@ -769,6 +789,7 @@ n_read(int fd, void *buffer, size_t count)
 static ssize_t
 n_write(int fd, const void *buffer, size_t count)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	size_t n = 0;
 	const char *buf = buffer;
 	int i;
@@ -802,6 +823,7 @@ n_write(int fd, const void *buffer, size_t count)
 static void
 _vte_pty_stop_helper(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (_vte_pty_helper_started) {
 		g_tree_destroy(_vte_pty_helper_map);
 		_vte_pty_helper_map = NULL;
@@ -816,12 +838,14 @@ _vte_pty_stop_helper(void)
 static gint
 _vte_direct_compare(gconstpointer a, gconstpointer b)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return GPOINTER_TO_INT(a) - GPOINTER_TO_INT(b);
 }
 
 static gboolean
 _vte_pty_start_helper(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i, tmp[2], tunnel;
 	/* Sanity check. */
 	if (access(LIBEXECDIR "/gnome-pty-helper", X_OK) != 0) {
@@ -880,6 +904,7 @@ _vte_pty_open_with_helper(GPid *child, char **env_add,
 			  const char *directory,
 			  int columns, int rows, int op)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GnomePtyOps ops;
 	int ret;
 	int parentfd = -1, childfd = -1;
@@ -973,6 +998,7 @@ _vte_pty_open(pid_t *child_pid, char **env_add,
 	      int columns, int rows,
 	      gboolean lastlog, gboolean utmp, gboolean wtmp)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GPid child;
 	int ret = -1;
 #ifdef VTE_USE_GNOME_PTY_HELPER
@@ -1029,6 +1055,7 @@ _vte_pty_open(pid_t *child_pid, char **env_add,
 void
 _vte_pty_set_utf8(int pty, gboolean utf8)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 #if defined(HAVE_TCSETATTR) && defined(IUTF8)
 	struct termios tio;
 	tcflag_t saved_cflag;
@@ -1057,6 +1084,7 @@ _vte_pty_set_utf8(int pty, gboolean utf8)
 void
 _vte_pty_close(int pty)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 #ifdef VTE_USE_GNOME_PTY_HELPER
 	gpointer tag;
 	GnomePtyOps ops;
@@ -1098,6 +1126,7 @@ int fd;
 static void
 sigchld_handler(int signum)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* This is very unsafe.  Never do it in production code. */
 	_vte_pty_close(fd);
 }
@@ -1105,6 +1134,7 @@ sigchld_handler(int signum)
 int
 main(int argc, char **argv)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GPid child = 0;
 	char c;
 	int ret;
diff --git a/src/reaper.c b/src/reaper.c
index 309db12..1b22b89 100644
--- a/src/reaper.c
+++ b/src/reaper.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2002 Red Hat, Inc.
  *
@@ -29,6 +30,7 @@ G_DEFINE_TYPE(VteReaper, vte_reaper, G_TYPE_OBJECT)
 static void
 vte_reaper_child_watch_cb(GPid pid, gint status, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Reaper emitting child-exited signal.\n");
 	g_signal_emit_by_name(data, "child-exited", pid, status);
@@ -49,6 +51,7 @@ vte_reaper_child_watch_cb(GPid pid, gint status, gpointer data)
 int
 vte_reaper_add_child(GPid pid)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return g_child_watch_add_full(G_PRIORITY_LOW,
 				      pid,
 				      vte_reaper_child_watch_cb,
@@ -59,6 +62,7 @@ vte_reaper_add_child(GPid pid)
 static void
 vte_reaper_init(VteReaper *reaper)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 }
 
 static GObject*
@@ -66,6 +70,7 @@ vte_reaper_constructor (GType                  type,
                         guint                  n_construct_properties,
                         GObjectConstructParam *construct_properties)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   if (singleton_reaper) {
 	  return g_object_ref (singleton_reaper);
   } else {
@@ -80,6 +85,7 @@ vte_reaper_constructor (GType                  type,
 static void
 vte_reaper_finalize(GObject *reaper)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	G_OBJECT_CLASS(vte_reaper_parent_class)->finalize(reaper);
 	singleton_reaper = NULL;
 }
@@ -87,6 +93,7 @@ vte_reaper_finalize(GObject *reaper)
 static void
 vte_reaper_class_init(VteReaperClass *klass)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GObjectClass *gobject_class;
 
 	klass->child_exited_signal = g_signal_new(g_intern_static_string("child-exited"),
@@ -115,6 +122,7 @@ vte_reaper_class_init(VteReaperClass *klass)
 VteReaper *
 vte_reaper_get(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return g_object_new(VTE_TYPE_REAPER, NULL);
 }
 
@@ -129,6 +137,7 @@ pid_t child;
 static void
 child_exited(GObject *object, int pid, int status, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_print("[parent] Child with pid %d exited with code %d, "
 		"was waiting for %d.\n", pid, status, GPOINTER_TO_INT(data));
 	if (child == pid) {
@@ -140,6 +149,7 @@ child_exited(GObject *object, int pid, int status, gpointer data)
 int
 main(int argc, char **argv)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteReaper *reaper;
 	pid_t p, q;
 
diff --git a/src/ring.c b/src/ring.c
index f8b227d..9d07d89 100644
--- a/src/ring.c
+++ b/src/ring.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2002 Red Hat, Inc.
  *
@@ -27,6 +28,7 @@
 static void
 _vte_ring_validate(VteRing * ring)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long i, max;
 	g_assert(ring != NULL);
 	g_assert(ring->length <= ring->max);
@@ -55,6 +57,7 @@ _vte_ring_validate(VteRing * ring)
 VteRing *
 _vte_ring_new(glong max_elements, VteRingFreeFunc free_func, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRing *ret = g_slice_new0(VteRing);
 	ret->user_data = data;
 	ret->cached_item = -1;
@@ -68,6 +71,7 @@ VteRing *
 _vte_ring_new_with_delta(glong max_elements, glong delta,
 			 VteRingFreeFunc free_func, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRing *ret;
 	ret = _vte_ring_new(max_elements, free_func, data);
 	ret->delta = delta;
@@ -88,6 +92,7 @@ _vte_ring_new_with_delta(glong max_elements, glong delta,
 gpointer
 _vte_ring_insert(VteRing * ring, long position, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gpointer old_data = NULL;
 	long point, i;
 
@@ -182,6 +187,7 @@ _vte_ring_insert(VteRing * ring, long position, gpointer data)
 gpointer
 _vte_ring_insert_preserve(VteRing * ring, long position, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long point, i;
 	gpointer **tmp, old_data = NULL;
 	gpointer *stack_tmp[128];
@@ -246,6 +252,7 @@ _vte_ring_insert_preserve(VteRing * ring, long position, gpointer data)
 gpointer
 _vte_ring_remove(VteRing * ring, long position, gboolean free_element)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long i;
 	gpointer old_data;
 	_vte_debug_print(VTE_DEBUG_RING,
@@ -301,6 +308,7 @@ _vte_ring_remove(VteRing * ring, long position, gboolean free_element)
 gpointer
 _vte_ring_append(VteRing * ring, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(data != NULL);
 	return _vte_ring_insert(ring, ring->delta + ring->length, data);
 }
@@ -316,6 +324,7 @@ _vte_ring_append(VteRing * ring, gpointer data)
 void
 _vte_ring_free(VteRing * ring, gboolean free_elements)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long i;
 	if (free_elements && ring->free) {
 		for (i = 0; i < ring->max; i++) {
@@ -333,6 +342,7 @@ _vte_ring_free(VteRing * ring, gboolean free_elements)
 static void
 scrolled_off(gpointer freed, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long *l = (long *)freed;
 	char *fmt = data;
 	g_printerr(fmt, *l);
@@ -341,6 +351,7 @@ scrolled_off(gpointer freed, gpointer data)
 int
 main(int argc, char **argv)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long i, j, k, bias;
 	const int size = 8;
 	long values[40];
diff --git a/src/table.c b/src/table.c
index 24f8766..8c07e1e 100644
--- a/src/table.c
+++ b/src/table.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2002 Red Hat, Inc.
  *
@@ -73,12 +74,14 @@ struct _vte_table_arginfo_head {
 static void
 _vte_table_arginfo_head_init(struct _vte_table_arginfo_head *head)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	head->list = NULL;
 	head->stack_allocated = 0;
 }
 static inline struct _vte_table_arginfo*
 _vte_table_arginfo_alloc(struct _vte_table_arginfo_head *head)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_table_arginfo *info;
 	if (G_LIKELY (head->stack_allocated < G_N_ELEMENTS(head->stack))) {
 		info = &head->stack[head->stack_allocated++];
@@ -92,6 +95,7 @@ _vte_table_arginfo_alloc(struct _vte_table_arginfo_head *head)
 static void
 _vte_table_arginfo_head_revert(struct _vte_table_arginfo_head *head, struct _vte_table_arginfo *last)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_table_arginfo *info;
 	info = head->list;
 	head->list = last->next;
@@ -115,6 +119,7 @@ _vte_table_arginfo_head_revert(struct _vte_table_arginfo_head *head, struct _vte
 static struct _vte_table_arginfo *
 _vte_table_arginfo_head_reverse(struct _vte_table_arginfo_head *head)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_table_arginfo *prev = NULL;
 	while (head->list) {
 		struct _vte_table_arginfo *next = head->list->next;
@@ -129,6 +134,7 @@ _vte_table_arginfo_head_reverse(struct _vte_table_arginfo_head *head)
 static void
 _vte_table_arginfo_head_finalize(struct _vte_table_arginfo_head *head)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_table_arginfo *info, *next;
 	for (info = head->list; info != NULL; info = next) {
 		next = info->next;
@@ -144,6 +150,7 @@ _vte_table_arginfo_head_finalize(struct _vte_table_arginfo_head *head)
 struct _vte_table *
 _vte_table_new(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_table * ret;
 	ret = g_slice_new0(struct _vte_table);
 	ret->impl.klass = &_vte_matcher_table;
@@ -153,6 +160,7 @@ _vte_table_new(void)
 static struct _vte_table **
 _vte_table_literal_new(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return g_new0(struct _vte_table *, VTE_TABLE_MAX_LITERAL);
 }
 
@@ -160,6 +168,7 @@ _vte_table_literal_new(void)
 void
 _vte_table_free(struct _vte_table *table)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned int i;
 	if (table->table != NULL) {
 		for (i = 0; i < VTE_TABLE_MAX_LITERAL; i++) {
@@ -196,6 +205,7 @@ _vte_table_addi(struct _vte_table *table,
 		const char *pattern, gssize length,
 		const char *result, GQuark quark, int inc)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i;
 	guint8 check;
 	struct _vte_table *subtable;
@@ -401,6 +411,7 @@ _vte_table_add(struct _vte_table *table,
 	       const char *pattern, gssize length,
 	       const char *result, GQuark quark)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_table_addi(table,
 			(const unsigned char *) pattern, length,
 			pattern, length,
@@ -415,6 +426,7 @@ _vte_table_matchi(struct _vte_table *table,
 		  unsigned char **original, gssize *original_length,
 		  struct _vte_table_arginfo_head *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i = 0;
 	struct _vte_table *subtable = NULL;
 	struct _vte_table_arginfo *arginfo;
@@ -535,6 +547,7 @@ static void
 _vte_table_extract_numbers(GValueArray **array,
 			   struct _vte_table_arginfo *arginfo, long increment)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue value = {0,};
 	gssize i;
 
@@ -560,6 +573,7 @@ static void
 _vte_table_extract_string(GValueArray **array,
 			  struct _vte_table_arginfo *arginfo)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue value = {0,};
 	gunichar *ptr;
 	guint i;
@@ -583,6 +597,7 @@ static void
 _vte_table_extract_char(GValueArray **array,
 			struct _vte_table_arginfo *arginfo, long increment)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue value = {0,};
 
 	g_value_init(&value, G_TYPE_LONG);
@@ -602,6 +617,7 @@ _vte_table_match(struct _vte_table *table,
 		 const char **res, const gunichar **consumed,
 		 GQuark *quark, GValueArray **array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_table *head;
 	const gunichar *dummy_consumed;
 	const char *dummy_res;
@@ -736,6 +752,7 @@ _vte_table_match(struct _vte_table *table,
 static void
 _vte_table_printi(struct _vte_table *table, const char *lead, int *count)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned int i;
 	char *newlead = NULL;
 
@@ -782,6 +799,7 @@ _vte_table_printi(struct _vte_table *table, const char *lead, int *count)
 void
 _vte_table_print(struct _vte_table *table)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int count = 0;
 	_vte_table_printi(table, "", &count);
 	g_printerr("%d nodes = %ld bytes.\n",
@@ -793,6 +811,7 @@ _vte_table_print(struct _vte_table *table)
 static char *
 escape(const char *p)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	char *tmp;
 	GString *ret;
 	int i;
@@ -819,6 +838,7 @@ escape(const char *p)
 static gunichar *
 make_wide(const char *p)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gunichar *ret;
 	guint8 check;
 	int i;
@@ -836,6 +856,7 @@ make_wide(const char *p)
 static void
 print_array(GValueArray *array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i;
 	GValue *value;
 	if (array != NULL) {
@@ -864,6 +885,7 @@ print_array(GValueArray *array)
 int
 main(int argc, char **argv)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_table *table;
 	int i;
 	const char *candidates[] = {
diff --git a/src/trie.c b/src/trie.c
index 7b40a35..1e6b32f 100644
--- a/src/trie.c
+++ b/src/trie.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2001,2002 Red Hat, Inc.
  *
@@ -106,11 +107,13 @@ struct _vte_trie {
 static gboolean
 char_class_exact_check(gunichar c, struct char_class_data *data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return (c == data->c) ? TRUE : FALSE;
 }
 static void
 char_class_exact_setup(const gunichar *s, struct char_class_data *data, int inc)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	data->c = s[0];
 	return;
 }
@@ -118,6 +121,7 @@ static void
 char_class_percent_setup(const gunichar *s, struct char_class_data *data,
 			 int inc)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	data->c = '%';
 	return;
 }
@@ -125,12 +129,14 @@ static gboolean
 char_class_none_extract(const gunichar *s, gsize length,
 			struct char_class_data *data, GValueArray *array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return FALSE;
 }
 
 static gboolean
 char_class_digit_check(gunichar c, struct char_class_data *data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	switch (c) {
 		case '0':
 		case '1':
@@ -150,6 +156,7 @@ char_class_digit_check(gunichar c, struct char_class_data *data)
 static void
 char_class_digit_setup(const gunichar *s, struct char_class_data *data, int inc)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	data->inc = inc;
 	return;
 }
@@ -157,6 +164,7 @@ static gboolean
 char_class_digit_extract(const gunichar *s, gsize length,
 			 struct char_class_data *data, GValueArray *array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long ret = 0;
 	gsize i;
 	GValue value;
@@ -176,6 +184,7 @@ char_class_digit_extract(const gunichar *s, gsize length,
 static gboolean
 char_class_multi_check(gunichar c, struct char_class_data *data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	switch (c) {
 		case '0':
 		case '1':
@@ -196,6 +205,7 @@ char_class_multi_check(gunichar c, struct char_class_data *data)
 static void
 char_class_multi_setup(const gunichar *s, struct char_class_data *data, int inc)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	data->inc = inc;
 	return;
 }
@@ -203,6 +213,7 @@ static gboolean
 char_class_multi_extract(const gunichar *s, gsize length,
 			 struct char_class_data *data, GValueArray *array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long ret = 0;
 	gsize i;
 	GValue value;
@@ -227,11 +238,13 @@ char_class_multi_extract(const gunichar *s, gsize length,
 static gboolean
 char_class_any_check(gunichar c, struct char_class_data *data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return (c >= data->c) ? TRUE : FALSE;
 }
 static void
 char_class_any_setup(const gunichar *s, struct char_class_data *data, int inc)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	data->c = s[0] + inc;
 	return;
 }
@@ -239,6 +252,7 @@ static gboolean
 char_class_any_extract(const gunichar *s, gsize length,
 		       struct char_class_data *data, GValueArray *array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long ret = 0;
 	GValue value;
 	ret = s[0] - data->c;
@@ -253,17 +267,20 @@ char_class_any_extract(const gunichar *s, gsize length,
 static gboolean
 char_class_string_check(gunichar c, struct char_class_data *data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return (c != data->c) ? TRUE : FALSE;
 }
 static void
 char_class_string_setup(const gunichar *s, struct char_class_data *data, int inc)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	data->c = s[0];
 	return;
 }
 static gsize
 unichar_snlen(const gunichar *s, gsize length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gsize i;
 	for (i = 0; i < length; i++) {
 		if (s[i] == '\0') {
@@ -275,6 +292,7 @@ unichar_snlen(const gunichar *s, gsize length)
 static void
 unichar_sncpy(gunichar *d, const gunichar *s, gsize length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned int i;
 	for (i = 0; i < length; i++) {
 		d[i] = s[i];
@@ -286,6 +304,7 @@ unichar_sncpy(gunichar *d, const gunichar *s, gsize length)
 static int
 unichar_sncmp(const gunichar *a, const gunichar *b, gsize length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gsize i;
 	for (i = 0; i < length; i++) {
 		if (a[i] != b[i]) {
@@ -301,6 +320,7 @@ static gboolean
 char_class_string_extract(const gunichar *s, gsize length,
 			  struct char_class_data *data, GValueArray *array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gunichar *ret = NULL;
 	gsize len;
 	gsize i;
@@ -367,6 +387,7 @@ static struct char_class char_classes[] = {
 TRIE_MAYBE_STATIC struct _vte_trie *
 _vte_trie_new(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_trie *ret;
 	ret = g_slice_new0(struct _vte_trie);
 	ret->impl.klass = &_vte_matcher_trie;
@@ -376,6 +397,7 @@ _vte_trie_new(void)
 TRIE_MAYBE_STATIC void
 _vte_trie_free(struct _vte_trie *trie)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned int i;
 	for (i = 0; i < trie->trie_path_count; i++) {
 		_vte_trie_free(trie->trie_paths[i].trie);
@@ -392,6 +414,7 @@ static void
 _vte_trie_addx(struct _vte_trie *trie, gunichar *pattern, gsize length,
 	       const char *result, GQuark quark, int inc)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gsize i;
 	struct char_class *cclass = NULL;
 	struct char_class_data data;
@@ -480,6 +503,7 @@ TRIE_MAYBE_STATIC void
 _vte_trie_add(struct _vte_trie *trie, const char *pattern, gsize length,
 	      const char *result, GQuark quark)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	const guchar *tpattern;
 	guchar *wpattern, *wpattern_end;
 	VteConv conv;
@@ -520,6 +544,7 @@ _vte_trie_matchx(struct _vte_trie *trie, const gunichar *pattern, gsize length,
 		 const char **res, const gunichar **consumed,
 		 GQuark *quark, GValueArray *array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned int i;
 	const char *hres;
 	enum cclass cc;
@@ -672,6 +697,7 @@ _vte_trie_match(struct _vte_trie *trie, const gunichar *pattern, gsize length,
 		const char **res, const gunichar **consumed,
 		GQuark *quark, GValueArray **array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	const char *ret = NULL;
 	GQuark tmpquark;
 	GValueArray *valuearray;
@@ -725,6 +751,7 @@ static void
 _vte_trie_printx(struct _vte_trie *trie, const char *previous,
 		 gsize *nodecount)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned int i;
 	char buf[LINE_MAX];
 
@@ -801,6 +828,7 @@ _vte_trie_printx(struct _vte_trie *trie, const char *previous,
 TRIE_MAYBE_STATIC void
 _vte_trie_print(struct _vte_trie *trie)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gsize nodecount = 0;
 	_vte_trie_printx(trie, "", &nodecount);
 	printf("Trie has %ld nodes.\n", (long) nodecount);
@@ -810,6 +838,7 @@ _vte_trie_print(struct _vte_trie *trie)
 static void
 dump_array(GValueArray *array)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned int i;
 	if (array != NULL) {
 		printf("args = {");
@@ -838,6 +867,7 @@ static void
 convert_mbstowcs(const char *i, gsize ilen,
 		 gunichar *o, gsize *olen, gsize max_olen)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteConv conv;
 	gsize outlen;
 	conv = _vte_conv_open(VTE_CONV_GUNICHAR_TYPE, "UTF-8");
@@ -854,6 +884,7 @@ convert_mbstowcs(const char *i, gsize ilen,
 int
 main(int argc, char **argv)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_trie *trie;
 	GValueArray *array = NULL;
 	GQuark quark;
diff --git a/src/vte.c b/src/vte.c
index b0971c7..fd40d30 100644
--- a/src/vte.c
+++ b/src/vte.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2001-2004 Red Hat, Inc.
  *
@@ -173,6 +174,7 @@ G_LOCK_DEFINE_STATIC(free_chunks);
 static struct _vte_incoming_chunk *
 get_chunk (void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_incoming_chunk *chunk = NULL;
 	G_LOCK (free_chunks);
 	if (free_chunks) {
@@ -190,6 +192,7 @@ get_chunk (void)
 static void
 release_chunk (struct _vte_incoming_chunk *chunk)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	G_LOCK (free_chunks);
 	chunk->next = free_chunks;
 	chunk->len = free_chunks ? free_chunks->len + 1 : 0;
@@ -199,6 +202,7 @@ release_chunk (struct _vte_incoming_chunk *chunk)
 static void
 prune_chunks (guint len)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_incoming_chunk *chunk = NULL;
 	G_LOCK (free_chunks);
 	if (len && free_chunks != NULL) {
@@ -225,6 +229,7 @@ prune_chunks (guint len)
 static void
 _vte_incoming_chunks_release (struct _vte_incoming_chunk *chunk)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	while (chunk) {
 		struct _vte_incoming_chunk *next = chunk->next;
 		release_chunk (chunk);
@@ -234,6 +239,7 @@ _vte_incoming_chunks_release (struct _vte_incoming_chunk *chunk)
 static gsize
 _vte_incoming_chunks_length (struct _vte_incoming_chunk *chunk)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gsize len = 0;
 	while (chunk) {
 		len += chunk->len;
@@ -244,6 +250,7 @@ _vte_incoming_chunks_length (struct _vte_incoming_chunk *chunk)
 static gsize
 _vte_incoming_chunks_count (struct _vte_incoming_chunk *chunk)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gsize cnt = 0;
 	while (chunk) {
 		cnt ++;
@@ -254,6 +261,7 @@ _vte_incoming_chunks_count (struct _vte_incoming_chunk *chunk)
 static struct _vte_incoming_chunk *
 _vte_incoming_chunks_reverse(struct _vte_incoming_chunk *chunk)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_incoming_chunk *prev = NULL;
 	while (chunk) {
 		struct _vte_incoming_chunk *next = chunk->next;
@@ -283,6 +291,7 @@ static const guchar corresponding_dim_index[] = {16,88,28,100,18,90,30,102};
 void
 _vte_free_row_data(VteRowData *row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_array_free(row->cells, TRUE);
 	g_slice_free(VteRowData, row);
 }
@@ -292,6 +301,7 @@ _vte_free_row_data(VteRowData *row)
 static void
 vte_g_array_fill(GArray *array, gconstpointer item, guint final_size)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (array->len >= final_size) {
 		return;
 	}
@@ -306,6 +316,7 @@ vte_g_array_fill(GArray *array, gconstpointer item, guint final_size)
 VteRowData *
 _vte_new_row_data(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row = NULL;
 	row = g_slice_new(VteRowData);
 	row->cells = g_array_new(FALSE, TRUE, sizeof(struct vte_charcell));
@@ -317,6 +328,7 @@ _vte_new_row_data(VteTerminal *terminal)
 VteRowData *
 _vte_new_row_data_sized(VteTerminal *terminal, gboolean fill)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row = NULL;
 	row = g_slice_new(VteRowData);
 	row->cells = g_array_sized_new(FALSE, TRUE,
@@ -334,6 +346,7 @@ _vte_new_row_data_sized(VteTerminal *terminal, gboolean fill)
 VteRowData *
 _vte_reset_row_data (VteTerminal *terminal, VteRowData *row, gboolean fill)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_array_set_size (row->cells, 0);
 	row->soft_wrapped = 0;
 	if (fill) {
@@ -348,6 +361,7 @@ _vte_reset_row_data (VteTerminal *terminal, VteRowData *row, gboolean fill)
 static void
 vte_insert_line_internal(VteTerminal *terminal, glong position)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row, *old_row;
 	old_row = terminal->pvt->free_row;
 	/* Pad out the line data to the insertion point. */
@@ -378,6 +392,7 @@ vte_insert_line_internal(VteTerminal *terminal, glong position)
 static void
 vte_remove_line_internal(VteTerminal *terminal, glong position)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (_vte_ring_next(terminal->pvt->screen->row_data) > position) {
 		if (terminal->pvt->free_row)
 			_vte_free_row_data (terminal->pvt->free_row);
@@ -394,6 +409,7 @@ vte_remove_line_internal(VteTerminal *terminal, glong position)
 void
 _vte_terminal_set_default_attributes(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 
 	screen = terminal->pvt->screen;
@@ -425,6 +441,7 @@ _vte_invalidate_cells(VteTerminal *terminal,
 		      glong column_start, gint column_count,
 		      glong row_start, gint row_count)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkRectangle rect;
 	glong i;
 
@@ -522,6 +539,7 @@ _vte_invalidate_region (VteTerminal *terminal,
 			glong srow, glong erow,
 			gboolean block)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (block || srow == erow) {
 		_vte_invalidate_cells(terminal,
 				scolumn, ecolumn - scolumn + 1,
@@ -545,6 +563,7 @@ _vte_invalidate_region (VteTerminal *terminal,
 void
 _vte_invalidate_all(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkRectangle rect;
 
 	g_assert(VTE_IS_TERMINAL(terminal));
@@ -585,6 +604,7 @@ void
 _vte_terminal_scroll_region (VteTerminal *terminal,
 			     long row, glong count, glong delta)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if ((delta == 0) || (count == 0)) {
 		/* Shenanigans! */
 		return;
@@ -606,6 +626,7 @@ _vte_terminal_scroll_region (VteTerminal *terminal,
 static inline VteRowData *
 _vte_terminal_find_row_data(VteTerminal *terminal, glong row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata = NULL;
 	VteScreen *screen = terminal->pvt->screen;
 	if (_vte_ring_contains(screen->row_data, row)) {
@@ -617,6 +638,7 @@ _vte_terminal_find_row_data(VteTerminal *terminal, glong row)
 static struct vte_charcell *
 vte_terminal_find_charcell(VteTerminal *terminal, gulong col, glong row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata;
 	struct vte_charcell *ret = NULL;
 	VteScreen *screen;
@@ -636,6 +658,7 @@ vte_terminal_find_charcell(VteTerminal *terminal, gulong col, glong row)
 static inline struct vte_charcell *
 _vte_row_data_find_charcell(VteRowData *rowdata, gulong col)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_charcell *ret = NULL;
 	if (rowdata->cells->len > col) {
 		ret = &g_array_index(rowdata->cells,
@@ -650,6 +673,7 @@ _vte_row_data_find_charcell(VteRowData *rowdata, gulong col)
 static gssize
 vte_terminal_preedit_width(VteTerminal *terminal, gboolean left_only)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gunichar c;
 	int i;
 	gssize ret = 0;
@@ -676,6 +700,7 @@ vte_terminal_preedit_width(VteTerminal *terminal, gboolean left_only)
 static gssize
 vte_terminal_preedit_length(VteTerminal *terminal, gboolean left_only)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i = 0;
 	const char *preedit = NULL;
 
@@ -697,6 +722,7 @@ vte_terminal_preedit_length(VteTerminal *terminal, gboolean left_only)
 void
 _vte_invalidate_cell(VteTerminal *terminal, glong col, glong row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row_data;
 	int columns;
 
@@ -737,6 +763,7 @@ _vte_invalidate_cell(VteTerminal *terminal, glong col, glong row)
 void
 _vte_invalidate_cursor_once(VteTerminal *terminal, gboolean periodic)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	struct vte_charcell *cell;
 	gssize preedit_width;
@@ -798,6 +825,7 @@ _vte_invalidate_cursor_once(VteTerminal *terminal, gboolean periodic)
 static gboolean
 vte_invalidate_cursor_periodic (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt = terminal->pvt;
 
 	pvt->cursor_blink_state = !pvt->cursor_blink_state;
@@ -826,6 +854,7 @@ vte_invalidate_cursor_periodic (VteTerminal *terminal)
 static void
 vte_terminal_emit_selection_changed(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `selection-changed'.\n");
 	g_signal_emit_by_name(terminal, "selection-changed");
@@ -835,6 +864,7 @@ vte_terminal_emit_selection_changed(VteTerminal *terminal)
 static void
 vte_terminal_emit_commit(VteTerminal *terminal, const gchar *text, guint length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	const char *result = NULL;
 	char *wrapped = NULL;
 
@@ -860,6 +890,7 @@ vte_terminal_emit_commit(VteTerminal *terminal, const gchar *text, guint length)
 static void
 vte_terminal_emit_emulation_changed(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `emulation-changed'.\n");
 	g_signal_emit_by_name(terminal, "emulation-changed");
@@ -871,6 +902,7 @@ vte_terminal_emit_emulation_changed(VteTerminal *terminal)
 static void
 vte_terminal_emit_encoding_changed(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `encoding-changed'.\n");
 	g_signal_emit_by_name(terminal, "encoding-changed");
@@ -881,6 +913,7 @@ vte_terminal_emit_encoding_changed(VteTerminal *terminal)
 static void
 vte_terminal_emit_child_exited(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `child-exited'.\n");
 	g_signal_emit_by_name(terminal, "child-exited");
@@ -890,6 +923,7 @@ vte_terminal_emit_child_exited(VteTerminal *terminal)
 static void
 vte_terminal_emit_contents_changed(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->contents_changed_pending) {
 		/* Update dingus match set. */
 		vte_terminal_match_contents_clear(terminal);
@@ -908,6 +942,7 @@ vte_terminal_emit_contents_changed(VteTerminal *terminal)
 void
 _vte_terminal_queue_contents_changed(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Queueing `contents-changed'.\n");
 	terminal->pvt->contents_changed_pending = TRUE;
@@ -917,6 +952,7 @@ _vte_terminal_queue_contents_changed(VteTerminal *terminal)
 static void
 vte_terminal_emit_cursor_moved(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->cursor_moved_pending) {
 		_vte_debug_print(VTE_DEBUG_SIGNALS,
 				"Emitting `cursor-moved'.\n");
@@ -927,6 +963,7 @@ vte_terminal_emit_cursor_moved(VteTerminal *terminal)
 static void
 vte_terminal_queue_cursor_moved(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Queueing `cursor-moved'.\n");
 	terminal->pvt->cursor_moved_pending = TRUE;
@@ -935,6 +972,7 @@ vte_terminal_queue_cursor_moved(VteTerminal *terminal)
 static gboolean
 vte_terminal_emit_eof(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `eof'.\n");
 	GDK_THREADS_ENTER ();
@@ -947,6 +985,7 @@ vte_terminal_emit_eof(VteTerminal *terminal)
 static void
 vte_terminal_queue_eof(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Queueing `eof'.\n");
 	g_idle_add_full (G_PRIORITY_HIGH,
@@ -960,6 +999,7 @@ static void
 vte_terminal_emit_char_size_changed(VteTerminal *terminal,
 				    guint width, guint height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `char-size-changed'.\n");
 	g_signal_emit_by_name(terminal, "char-size-changed",
@@ -971,6 +1011,7 @@ vte_terminal_emit_char_size_changed(VteTerminal *terminal,
 static void
 _vte_terminal_emit_status_line_changed(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `status-line-changed'.\n");
 	g_signal_emit_by_name(terminal, "status-line-changed");
@@ -981,6 +1022,7 @@ _vte_terminal_emit_status_line_changed(VteTerminal *terminal)
 static void
 vte_terminal_emit_increase_font_size(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `increase-font-size'.\n");
 	g_signal_emit_by_name(terminal, "increase-font-size");
@@ -991,6 +1033,7 @@ vte_terminal_emit_increase_font_size(VteTerminal *terminal)
 static void
 vte_terminal_emit_decrease_font_size(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `decrease-font-size'.\n");
 	g_signal_emit_by_name(terminal, "decrease-font-size");
@@ -1001,6 +1044,7 @@ vte_terminal_emit_decrease_font_size(VteTerminal *terminal)
 void
 _vte_terminal_emit_text_inserted(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (!terminal->pvt->accessible_emit) {
 		return;
 	}
@@ -1013,6 +1057,7 @@ _vte_terminal_emit_text_inserted(VteTerminal *terminal)
 void
 _vte_terminal_emit_text_deleted(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (!terminal->pvt->accessible_emit) {
 		return;
 	}
@@ -1025,6 +1070,7 @@ _vte_terminal_emit_text_deleted(VteTerminal *terminal)
 static void
 vte_terminal_emit_text_modified(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (!terminal->pvt->accessible_emit) {
 		return;
 	}
@@ -1037,6 +1083,7 @@ vte_terminal_emit_text_modified(VteTerminal *terminal)
 static void
 vte_terminal_emit_text_scrolled(VteTerminal *terminal, gint delta)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (!terminal->pvt->accessible_emit) {
 		return;
 	}
@@ -1049,6 +1096,7 @@ vte_terminal_emit_text_scrolled(VteTerminal *terminal, gint delta)
 static void
 vte_terminal_deselect_all(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->has_selection) {
 		gint sx, sy, ex, ey;
 
@@ -1076,6 +1124,7 @@ vte_terminal_deselect_all(VteTerminal *terminal)
 void
 _vte_terminal_clear_tabstop(VteTerminal *terminal, int column)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL(terminal));
 	if (terminal->pvt->tabstops != NULL) {
 		/* Remove a tab stop from the hash table. */
@@ -1088,6 +1137,7 @@ _vte_terminal_clear_tabstop(VteTerminal *terminal, int column)
 gboolean
 _vte_terminal_get_tabstop(VteTerminal *terminal, int column)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gpointer hash;
 	g_assert(VTE_IS_TERMINAL(terminal));
 	if (terminal->pvt->tabstops != NULL) {
@@ -1103,6 +1153,7 @@ _vte_terminal_get_tabstop(VteTerminal *terminal, int column)
 void
 _vte_terminal_set_tabstop(VteTerminal *terminal, int column)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL(terminal));
 	if (terminal->pvt->tabstops != NULL) {
 		/* Just set a non-NULL pointer for this column number. */
@@ -1116,6 +1167,7 @@ _vte_terminal_set_tabstop(VteTerminal *terminal, int column)
 static void
 vte_terminal_set_default_tabstops(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i, width = 0;
 	if (terminal->pvt->tabstops != NULL) {
 		g_hash_table_destroy(terminal->pvt->tabstops);
@@ -1138,6 +1190,7 @@ vte_terminal_set_default_tabstops(VteTerminal *terminal)
 static void
 vte_terminal_match_contents_clear(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL(terminal));
 	if (terminal->pvt->match_contents != NULL) {
 		g_free(terminal->pvt->match_contents);
@@ -1154,12 +1207,14 @@ vte_terminal_match_contents_clear(VteTerminal *terminal)
 static gboolean
 always_selected(VteTerminal *terminal, glong column, glong row, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return TRUE;
 }
 
 static void
 vte_terminal_match_contents_refresh(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GArray *array;
 	vte_terminal_match_contents_clear(terminal);
 	array = g_array_new(FALSE, TRUE, sizeof(struct _VteCharAttributes));
@@ -1173,6 +1228,7 @@ vte_terminal_match_contents_refresh(VteTerminal *terminal)
 static void
 regex_match_clear_cursor (struct vte_match_regex *regex)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         switch (regex->cursor_mode) {
                 case VTE_REGEX_CURSOR_GDKCURSOR:
                         if (regex->cursor.cursor != NULL) {
@@ -1195,6 +1251,7 @@ regex_match_clear_cursor (struct vte_match_regex *regex)
 static void
 regex_match_clear (struct vte_match_regex *regex)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         regex_match_clear_cursor(regex);
 
         if (regex->mode == VTE_REGEX_GREGEX) {
@@ -1211,6 +1268,7 @@ regex_match_clear (struct vte_match_regex *regex)
 static void
 vte_terminal_set_cursor_from_regex_match(VteTerminal *terminal, struct vte_match_regex *regex)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         GdkCursor *cursor = NULL;
 
         if (!GTK_WIDGET_REALIZED(terminal))
@@ -1248,6 +1306,7 @@ vte_terminal_set_cursor_from_regex_match(VteTerminal *terminal, struct vte_match
 void
 vte_terminal_match_clear_all(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_match_regex *regex;
 	guint i;
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -1277,6 +1336,7 @@ vte_terminal_match_clear_all(VteTerminal *terminal)
 void
 vte_terminal_match_remove(VteTerminal *terminal, int tag)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_match_regex *regex;
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	if (terminal->pvt->match_regexes->len > (guint)tag) {
@@ -1297,6 +1357,7 @@ vte_terminal_match_remove(VteTerminal *terminal, int tag)
 static GdkCursor *
 vte_terminal_cursor_new(VteTerminal *terminal, GdkCursorType cursor_type)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkDisplay *display;
 	GdkCursor *cursor;
 
@@ -1321,6 +1382,7 @@ vte_terminal_cursor_new(VteTerminal *terminal, GdkCursorType cursor_type)
 int
 vte_terminal_match_add(VteTerminal *terminal, const char *match)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_match_regex new_regex, *regex;
 	guint ret;
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), -1);
@@ -1381,6 +1443,7 @@ vte_terminal_match_add(VteTerminal *terminal, const char *match)
 int
 vte_terminal_match_add_gregex(VteTerminal *terminal, GRegex *regex, GRegexMatchFlags flags)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalPrivate *pvt;
 	struct vte_match_regex new_regex_match, *regex_match;
 	guint ret, len;
@@ -1439,6 +1502,7 @@ vte_terminal_match_add_gregex(VteTerminal *terminal, GRegex *regex, GRegexMatchF
 void
 vte_terminal_match_set_cursor(VteTerminal *terminal, int tag, GdkCursor *cursor)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_match_regex *regex;
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_return_if_fail((guint) tag < terminal->pvt->match_regexes->len);
@@ -1467,6 +1531,7 @@ void
 vte_terminal_match_set_cursor_type(VteTerminal *terminal,
 				   int tag, GdkCursorType cursor_type)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_match_regex *regex;
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_return_if_fail((guint) tag < terminal->pvt->match_regexes->len);
@@ -1495,6 +1560,7 @@ void
 vte_terminal_match_set_cursor_name(VteTerminal *terminal,
 				   int tag, const char *cursor_name)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_match_regex *regex;
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
         g_return_if_fail(cursor_name != NULL);
@@ -1516,6 +1582,7 @@ vte_terminal_match_check_internal_vte(VteTerminal *terminal,
                                       long column, glong row,
                                       int *tag, int *start, int *end)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_regex_match matches[256];
 	guint i, j;
 	gint k;
@@ -1741,6 +1808,7 @@ vte_terminal_match_check_internal_gregex(VteTerminal *terminal,
                                          long column, glong row,
                                          int *tag, int *start, int *end)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gint start_blank, end_blank;
         guint i;
 	int offset;
@@ -1959,6 +2027,7 @@ vte_terminal_match_check_internal(VteTerminal *terminal,
                                   long column, glong row,
                                   int *tag, int *start, int *end)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->match_contents == NULL) {
 		vte_terminal_match_contents_refresh(terminal);
 	}
@@ -1973,6 +2042,7 @@ vte_terminal_match_check_internal(VteTerminal *terminal,
 static gboolean
 rowcol_inside_match (VteTerminal *terminal, glong row, glong col)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->match_start.row == terminal->pvt->match_end.row) {
 		return row == terminal->pvt->match_start.row &&
 			col >= terminal->pvt->match_start.column &&
@@ -2015,6 +2085,7 @@ char *
 vte_terminal_match_check(VteTerminal *terminal, glong column, glong row,
 			 int *tag)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long delta;
 	char *ret;
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), NULL);
@@ -2044,6 +2115,7 @@ vte_terminal_match_check(VteTerminal *terminal, glong column, glong row,
 static void
 vte_terminal_emit_adjustment_changed(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->adjustment_changed_pending) {
 		VteScreen *screen = terminal->pvt->screen;
 		gboolean changed = FALSE;
@@ -2102,12 +2174,14 @@ vte_terminal_emit_adjustment_changed(VteTerminal *terminal)
 static inline void
 vte_terminal_queue_adjustment_changed(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->adjustment_changed_pending = TRUE;
 	add_update_timeout (terminal);
 }
 static void
 vte_terminal_queue_adjustment_value_changed(VteTerminal *terminal, glong v)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (v != terminal->pvt->screen->scroll_delta) {
 		terminal->pvt->screen->scroll_delta = v;
 		terminal->pvt->adjustment_value_changed_pending = TRUE;
@@ -2119,6 +2193,7 @@ vte_terminal_queue_adjustment_value_changed(VteTerminal *terminal, glong v)
 void
 _vte_terminal_adjust_adjustments(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	long delta;
 
@@ -2148,6 +2223,7 @@ _vte_terminal_adjust_adjustments(VteTerminal *terminal)
 static void
 _vte_terminal_adjust_adjustments_full (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean changed = FALSE;
 
 	g_assert(terminal->pvt->screen != NULL);
@@ -2199,6 +2275,7 @@ _vte_terminal_adjust_adjustments_full (VteTerminal *terminal)
 static void
 vte_terminal_scroll_lines(VteTerminal *terminal, gint lines)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	glong destination;
 	_vte_debug_print(VTE_DEBUG_ADJ, "Scrolling %d lines.\n", lines);
 	/* Calculate the ideal position where we want to be before clamping. */
@@ -2217,6 +2294,7 @@ vte_terminal_scroll_lines(VteTerminal *terminal, gint lines)
 static void
 vte_terminal_scroll_pages(VteTerminal *terminal, gint pages)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_scroll_lines(terminal, pages * terminal->row_count);
 }
 
@@ -2224,6 +2302,7 @@ vte_terminal_scroll_pages(VteTerminal *terminal, gint pages)
 static void
 vte_terminal_maybe_scroll_to_top(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_queue_adjustment_value_changed (terminal,
 			_vte_ring_delta(terminal->pvt->screen->row_data));
 }
@@ -2231,6 +2310,7 @@ vte_terminal_maybe_scroll_to_top(VteTerminal *terminal)
 static void
 vte_terminal_maybe_scroll_to_bottom(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	glong delta;
 	delta = terminal->pvt->screen->insert_delta;
 	vte_terminal_queue_adjustment_value_changed (terminal, delta);
@@ -2241,6 +2321,7 @@ vte_terminal_maybe_scroll_to_bottom(VteTerminal *terminal)
 static void
 _vte_terminal_setup_utf8 (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   _vte_pty_set_utf8(terminal->pvt->pty_master,
 		    (strcmp(terminal->pvt->encoding, "UTF-8") == 0));
 }
@@ -2259,6 +2340,7 @@ _vte_terminal_setup_utf8 (VteTerminal *terminal)
 void
 vte_terminal_set_encoding(VteTerminal *terminal, const char *codeset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
         GObject *object;
 	const char *old_codeset;
@@ -2352,6 +2434,7 @@ vte_terminal_set_encoding(VteTerminal *terminal, const char *codeset)
 const char *
 vte_terminal_get_encoding(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), NULL);
 	return terminal->pvt->encoding;
 }
@@ -2359,6 +2442,7 @@ vte_terminal_get_encoding(VteTerminal *terminal)
 static inline VteRowData*
 vte_terminal_insert_rows (VteTerminal *terminal, guint cnt)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	const VteScreen *screen = terminal->pvt->screen;
 	VteRowData *old_row, *row;
 	old_row = terminal->pvt->free_row;
@@ -2380,6 +2464,7 @@ vte_terminal_insert_rows (VteTerminal *terminal, guint cnt)
 VteRowData *
 _vte_terminal_ensure_row (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row;
 	const VteScreen *screen;
 	gint delta;
@@ -2414,6 +2499,7 @@ _vte_terminal_ensure_row (VteTerminal *terminal)
 static VteRowData *
 vte_terminal_ensure_cursor(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row;
 	const VteScreen *screen;
 	glong v;
@@ -2435,6 +2521,7 @@ vte_terminal_ensure_cursor(VteTerminal *terminal)
 void
 _vte_terminal_update_insert_delta(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long delta, rows;
 	VteScreen *screen;
 
@@ -2469,6 +2556,7 @@ _vte_terminal_update_insert_delta(VteTerminal *terminal)
 void
 _vte_terminal_set_pointer_visible(VteTerminal *terminal, gboolean visible)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_match_regex *regex = NULL;
 	terminal->pvt->mouse_cursor_visible = visible;
 
@@ -2508,6 +2596,7 @@ _vte_terminal_set_pointer_visible(VteTerminal *terminal, gboolean visible)
 GtkWidget *
 vte_terminal_new(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return g_object_new(VTE_TYPE_TERMINAL, NULL);
 }
 
@@ -2516,6 +2605,7 @@ static void
 vte_terminal_set_color_internal(VteTerminal *terminal, int entry,
 				const GdkColor *proposed)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_palette_entry *color;
 
 	color = &terminal->pvt->palette[entry];
@@ -2559,6 +2649,7 @@ vte_terminal_generate_bold(const struct vte_palette_entry *foreground,
 			   double factor,
 			   GdkColor *bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	double fy, fcb, fcr, by, bcb, bcr, r, g, b;
 	g_assert(foreground != NULL);
 	g_assert(background != NULL);
@@ -2610,6 +2701,7 @@ vte_terminal_generate_bold(const struct vte_palette_entry *foreground,
 void
 vte_terminal_set_color_bold(VteTerminal *terminal, const GdkColor *bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_return_if_fail(bold != NULL);
 
@@ -2630,6 +2722,7 @@ vte_terminal_set_color_bold(VteTerminal *terminal, const GdkColor *bold)
 void
 vte_terminal_set_color_dim(VteTerminal *terminal, const GdkColor *dim)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_return_if_fail(dim != NULL);
 
@@ -2651,6 +2744,7 @@ void
 vte_terminal_set_color_foreground(VteTerminal *terminal,
 				  const GdkColor *foreground)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_return_if_fail(foreground != NULL);
 
@@ -2674,6 +2768,7 @@ void
 vte_terminal_set_color_background(VteTerminal *terminal,
 				  const GdkColor *background)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_return_if_fail(background != NULL);
 
@@ -2699,6 +2794,7 @@ void
 vte_terminal_set_color_cursor(VteTerminal *terminal,
 			      const GdkColor *cursor_background)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 
 	if (cursor_background != NULL) {
@@ -2733,6 +2829,7 @@ void
 vte_terminal_set_color_highlight(VteTerminal *terminal,
 				 const GdkColor *highlight_background)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 
 	if (highlight_background != NULL) {
@@ -2780,6 +2877,7 @@ vte_terminal_set_colors(VteTerminal *terminal,
 			const GdkColor *palette,
 			glong palette_size)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint i;
 	GdkColor color;
 
@@ -2901,6 +2999,7 @@ vte_terminal_set_colors(VteTerminal *terminal,
 void
 vte_terminal_set_opacity(VteTerminal *terminal, guint16 opacity)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -2925,6 +3024,7 @@ vte_terminal_set_opacity(VteTerminal *terminal, guint16 opacity)
 void
 vte_terminal_set_default_colors(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	vte_terminal_set_colors(terminal, NULL, NULL, NULL, 0);
 }
@@ -2934,6 +3034,7 @@ vte_terminal_set_default_colors(VteTerminal *terminal)
 void
 _vte_terminal_cleanup_tab_fragments_at_cursor (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row = _vte_terminal_ensure_row (terminal);
 	VteScreen *screen = terminal->pvt->screen;
 	long col = screen->cursor_current.col;
@@ -2962,6 +3063,7 @@ _vte_terminal_cleanup_tab_fragments_at_cursor (VteTerminal *terminal)
 void
 _vte_terminal_cursor_down (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row;
 	long start, end;
 	VteScreen *screen;
@@ -3051,6 +3153,7 @@ gboolean
 _vte_terminal_insert_char(VteTerminal *terminal, gunichar c,
 			 gboolean insert, gboolean invalidate_now)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_charcell_attr attr;
 	VteRowData *row;
 	long col;
@@ -3292,6 +3395,7 @@ static void
 vte_terminal_catch_child_exited(VteReaper *reaper, int pid, int status,
 				VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (pid == terminal->pvt->pty_pid) {
                 GObject *object = G_OBJECT(terminal);
 
@@ -3364,12 +3468,14 @@ vte_terminal_catch_child_exited(VteReaper *reaper, int pid, int status,
 
 static void mark_input_source_invalid(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print (VTE_DEBUG_IO, "removed poll of vte_terminal_io_read\n");
 	terminal->pvt->pty_input_source = 0;
 }
 static void
 _vte_terminal_connect_pty_read(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->pty_channel == NULL) {
 		return;
 	}
@@ -3388,12 +3494,14 @@ _vte_terminal_connect_pty_read(VteTerminal *terminal)
 
 static void mark_output_source_invalid(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print (VTE_DEBUG_IO, "removed poll of vte_terminal_io_write\n");
 	terminal->pvt->pty_output_source = 0;
 }
 static void
 _vte_terminal_connect_pty_write(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->pty_channel == NULL) {
 		terminal->pvt->pty_channel =
 			g_io_channel_unix_new(terminal->pvt->pty_master);
@@ -3419,6 +3527,7 @@ _vte_terminal_connect_pty_write(VteTerminal *terminal)
 static void
 _vte_terminal_disconnect_pty_read(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->pty_input_source != 0) {
 		_vte_debug_print (VTE_DEBUG_IO, "disconnecting poll of vte_terminal_io_read\n");
 		g_source_remove(terminal->pvt->pty_input_source);
@@ -3429,6 +3538,7 @@ _vte_terminal_disconnect_pty_read(VteTerminal *terminal)
 static void
 _vte_terminal_disconnect_pty_write(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->pty_output_source != 0) {
 		_vte_debug_print (VTE_DEBUG_IO, "disconnecting poll of vte_terminal_io_write\n");
 
@@ -3444,6 +3554,7 @@ _vte_terminal_fork_basic(VteTerminal *terminal, const char *command,
 			 const char *directory,
 			 gboolean lastlog, gboolean utmp, gboolean wtmp)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         GObject *object = G_OBJECT(terminal);
 	char **env_add;
 	int i, fd;
@@ -3555,6 +3666,7 @@ vte_terminal_fork_command(VteTerminal *terminal,
 			  const char *directory,
 			  gboolean lastlog, gboolean utmp, gboolean wtmp)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), -1);
 
 	/* Make the user's shell the default command. */
@@ -3617,6 +3729,7 @@ vte_terminal_forkpty(VteTerminal *terminal,
 		     char **envv, const char *directory,
 		     gboolean lastlog, gboolean utmp, gboolean wtmp)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), -1);
 
 	return _vte_terminal_fork_basic(terminal, NULL, NULL, envv,
@@ -3627,6 +3740,7 @@ vte_terminal_forkpty(VteTerminal *terminal,
 static void
 vte_terminal_eof(GIOChannel *channel, VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         GObject *object = G_OBJECT(terminal);
 
         g_object_freeze_notify(object);
@@ -3672,6 +3786,7 @@ vte_terminal_eof(GIOChannel *channel, VteTerminal *terminal)
 static void
 vte_terminal_im_reset(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (GTK_WIDGET_REALIZED(terminal)) {
 		gtk_im_context_reset(terminal->pvt->im_context);
 		if (terminal->pvt->im_preedit != NULL) {
@@ -3689,6 +3804,7 @@ vte_terminal_im_reset(VteTerminal *terminal)
 static void
 vte_terminal_emit_pending_text_signals(VteTerminal *terminal, GQuark quark)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	static struct {
 		const char *name;
 		GQuark quark;
@@ -3741,6 +3857,7 @@ vte_terminal_emit_pending_text_signals(VteTerminal *terminal, GQuark quark)
 static void
 vte_terminal_process_incoming(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	struct vte_cursor_position cursor;
 	gboolean cursor_visible;
@@ -4155,6 +4272,7 @@ next_match:
 static inline void
 _vte_terminal_enable_input_source (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->pty_channel == NULL) {
 		return;
 	}
@@ -4173,6 +4291,7 @@ _vte_terminal_enable_input_source (VteTerminal *terminal)
 static void
 _vte_terminal_feed_chunks (VteTerminal *terminal, struct _vte_incoming_chunk *chunks)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_incoming_chunk *last;
 
 	_vte_debug_print(VTE_DEBUG_IO, "Feed %"G_GSIZE_FORMAT" bytes, in %"G_GSIZE_FORMAT" chunks.\n",
@@ -4189,6 +4308,7 @@ vte_terminal_io_read(GIOChannel *channel,
 		     GIOCondition condition,
 		     VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int err = 0;
 	gboolean eof, again = TRUE;
 
@@ -4324,6 +4444,7 @@ out:
 void
 vte_terminal_feed(VteTerminal *terminal, const char *data, glong length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* If length == -1, use the length of the data string. */
 	if (length == ((gssize)-1)) {
 		length = strlen(data);
@@ -4363,6 +4484,7 @@ vte_terminal_io_write(GIOChannel *channel,
 		      GIOCondition condition,
 		      VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gssize count;
 	int fd;
 	gboolean leave_open;
@@ -4401,6 +4523,7 @@ vte_terminal_send(VteTerminal *terminal, const char *encoding,
 		  const void *data, gssize length,
 		  gboolean local_echo, gboolean newline_stuff)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gsize icount, ocount;
 	const guchar *ibuf;
 	guchar *obuf, *obufptr;
@@ -4526,6 +4649,7 @@ vte_terminal_send(VteTerminal *terminal, const char *encoding,
 void
 vte_terminal_feed_child(VteTerminal *terminal, const char *text, glong length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	if (length == ((gssize)-1)) {
 		length = strlen(text);
@@ -4549,6 +4673,7 @@ vte_terminal_feed_child(VteTerminal *terminal, const char *text, glong length)
 void
 vte_terminal_feed_child_binary(VteTerminal *terminal, const char *data, glong length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL(terminal));
 
 	/* Tell observers that we're sending this to the child. */
@@ -4572,6 +4697,7 @@ static void
 vte_terminal_feed_child_using_modes(VteTerminal *terminal,
 				    const char *data, glong length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (length == ((gssize)-1)) {
 		length = strlen(data);
 	}
@@ -4586,6 +4712,7 @@ vte_terminal_feed_child_using_modes(VteTerminal *terminal,
 static void
 vte_terminal_im_commit(GtkIMContext *im_context, gchar *text, VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_EVENTS,
 			"Input method committed `%s'.\n", text);
 	vte_terminal_feed_child_using_modes(terminal, text, -1);
@@ -4600,6 +4727,7 @@ vte_terminal_im_commit(GtkIMContext *im_context, gchar *text, VteTerminal *termi
 static void
 vte_terminal_im_preedit_start(GtkIMContext *im_context, VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_EVENTS,
 			"Input method pre-edit started.\n");
 	terminal->pvt->im_preedit_active = TRUE;
@@ -4609,6 +4737,7 @@ vte_terminal_im_preedit_start(GtkIMContext *im_context, VteTerminal *terminal)
 static void
 vte_terminal_im_preedit_end(GtkIMContext *im_context, VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_EVENTS,
 			"Input method pre-edit ended.\n");
 	terminal->pvt->im_preedit_active = FALSE;
@@ -4618,6 +4747,7 @@ vte_terminal_im_preedit_end(GtkIMContext *im_context, VteTerminal *terminal)
 static void
 vte_terminal_im_preedit_changed(GtkIMContext *im_context, VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gchar *str;
 	PangoAttrList *attrs;
 	gint cursor;
@@ -4648,6 +4778,7 @@ vte_terminal_im_preedit_changed(GtkIMContext *im_context, VteTerminal *terminal)
 static gboolean
 vte_terminal_configure_toplevel(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_EVENTS, "Top level parent configured.\n");
 
 	if (terminal->pvt->bg_transparent) {
@@ -4665,6 +4796,7 @@ static void
 vte_terminal_hierarchy_changed(GtkWidget *widget, GtkWidget *old_toplevel,
 			       gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *toplevel;
 
 	_vte_debug_print(VTE_DEBUG_EVENTS, "Hierarchy changed.\n");
@@ -4686,6 +4818,7 @@ static void
 vte_terminal_style_set (GtkWidget      *widget,
 			GtkStyle       *prev_style)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	if (!GTK_WIDGET_REALIZED(widget)) {
 		_vte_debug_print(VTE_DEBUG_MISC,
@@ -4702,6 +4835,7 @@ vte_terminal_style_set (GtkWidget      *widget,
 static void
 add_cursor_timeout (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->cursor_blink_time = 0;
 	terminal->pvt->cursor_blink_tag = g_timeout_add_full(G_PRIORITY_LOW,
 							     terminal->pvt->cursor_blink_cycle,
@@ -4713,6 +4847,7 @@ add_cursor_timeout (VteTerminal *terminal)
 static void
 remove_cursor_timeout (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_source_remove (terminal->pvt->cursor_blink_tag);
 	terminal->pvt->cursor_blink_tag = 0;
 }
@@ -4721,6 +4856,7 @@ remove_cursor_timeout (VteTerminal *terminal)
 void
 _vte_terminal_audible_beep(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkDisplay *display;
 
 	g_assert(VTE_IS_TERMINAL(terminal));
@@ -4731,6 +4867,7 @@ _vte_terminal_audible_beep(VteTerminal *terminal)
 void
 _vte_terminal_visible_beep(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *widget;
 
 	widget = &terminal->widget;
@@ -4751,6 +4888,7 @@ _vte_terminal_visible_beep(VteTerminal *terminal)
 void
 _vte_terminal_beep(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->audible_bell) {
 		_vte_terminal_audible_beep (terminal);
 	}
@@ -4767,6 +4905,7 @@ _vte_terminal_beep(VteTerminal *terminal)
 static guint
 vte_translate_national_ctrlkeys (GdkEventKey *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint keyval;
 	GdkModifierType consumed_modifiers;
 	GdkKeymap *keymap;
@@ -4790,6 +4929,7 @@ static void
 vte_terminal_read_modifiers (VteTerminal *terminal,
 			     GdkEvent    *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkModifierType modifiers;
 
 	/* Read the modifiers. */
@@ -4804,6 +4944,7 @@ vte_terminal_read_modifiers (VteTerminal *terminal,
 static gint
 vte_terminal_key_press(GtkWidget *widget, GdkEventKey *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	GdkModifierType modifiers;
 	struct _vte_termcap *termcap;
@@ -5224,6 +5365,7 @@ vte_terminal_key_press(GtkWidget *widget, GdkEventKey *event)
 static gboolean
 vte_terminal_key_release(GtkWidget *widget, GdkEventKey *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 
 	terminal = VTE_TERMINAL(widget);
@@ -5253,6 +5395,7 @@ vte_terminal_key_release(GtkWidget *widget, GdkEventKey *event)
 gboolean
 vte_terminal_is_word_char(VteTerminal *terminal, gunichar c)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint i;
 	VteWordCharRange *range;
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), FALSE);
@@ -5285,6 +5428,7 @@ static gboolean
 vte_same_class(VteTerminal *terminal, glong acol, glong arow,
 	       glong bcol, glong brow)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_charcell *pcell = NULL;
 	gboolean word_char;
 	if ((pcell = vte_terminal_find_charcell(terminal, acol, arow)) != NULL && pcell->c != 0) {
@@ -5310,6 +5454,7 @@ vte_same_class(VteTerminal *terminal, glong acol, glong arow,
 static gboolean
 vte_line_is_wrappable(VteTerminal *terminal, glong row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata;
 	rowdata = _vte_terminal_find_row_data(terminal, row);
 	return rowdata && rowdata->soft_wrapped;
@@ -5322,6 +5467,7 @@ vte_cell_is_between(glong col, glong row,
 		    glong acol, glong arow, glong bcol, glong brow,
 		    gboolean inclusive)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* Negative between never allowed. */
 	if ((arow > brow) || ((arow == brow) && (acol > bcol))) {
 		return FALSE;
@@ -5380,6 +5526,7 @@ vte_cell_is_between(glong col, glong row,
 static gboolean
 vte_cell_is_selected(VteTerminal *terminal, glong col, glong row, gpointer data)
 {
+	//printf ("Entering %s\n", __FUNCTION__);
 	struct selection_cell_coords ss, se;
 
 	/* If there's nothing selected, it's an easy question to answer. */
@@ -5410,6 +5557,7 @@ vte_cell_is_selected(VteTerminal *terminal, glong col, glong row, gpointer data)
 static void
 vte_terminal_paste_cb(GtkClipboard *clipboard, const gchar *text, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	gchar *paste, *p;
 	long length;
@@ -5449,6 +5597,7 @@ vte_terminal_get_mouse_tracking_info (VteTerminal   *terminal,
 				      unsigned char *px,
 				      unsigned char *py)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned char cb = 0, cx = 0, cy = 0;
 
 	/* Encode the button information in cb. */
@@ -5502,6 +5651,7 @@ vte_terminal_send_mouse_button_internal(VteTerminal *terminal,
 					long         x,
 					long         y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned char cb, cx, cy;
 	char buf[LINE_MAX];
 	gint len;
@@ -5524,6 +5674,7 @@ static void
 vte_terminal_maybe_send_mouse_button(VteTerminal *terminal,
 				     GdkEventButton *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* Read the modifiers. */
 	vte_terminal_read_modifiers (terminal, (GdkEvent*) event);
 
@@ -5554,6 +5705,7 @@ vte_terminal_maybe_send_mouse_button(VteTerminal *terminal,
 static void
 vte_terminal_maybe_send_mouse_drag(VteTerminal *terminal, GdkEventMotion *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned char cb, cx, cy;
 	char buf[LINE_MAX];
 	gint len;
@@ -5599,6 +5751,7 @@ vte_terminal_maybe_send_mouse_drag(VteTerminal *terminal, GdkEventMotion *event)
 static void
 vte_terminal_match_hilite_clear(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long srow, scolumn, erow, ecolumn;
 	srow = terminal->pvt->match_start.row;
 	scolumn = terminal->pvt->match_start.column;
@@ -5626,6 +5779,7 @@ vte_terminal_match_hilite_clear(VteTerminal *terminal)
 static gboolean
 cursor_inside_match (VteTerminal *terminal, long x, long y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gint width = terminal->char_width;
 	gint height = terminal->char_height;
 	glong col = x / width;
@@ -5652,6 +5806,7 @@ cursor_inside_match (VteTerminal *terminal, long x, long y)
 static void
 vte_terminal_match_hilite_show(VteTerminal *terminal, long x, long y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if(terminal->pvt->match != NULL && !terminal->pvt->show_match){
 		if (cursor_inside_match (terminal, x, y)) {
 			_vte_invalidate_region (terminal,
@@ -5667,6 +5822,7 @@ vte_terminal_match_hilite_show(VteTerminal *terminal, long x, long y)
 static void
 vte_terminal_match_hilite_hide(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if(terminal->pvt->match != NULL && terminal->pvt->show_match){
 		_vte_invalidate_region (terminal,
 				terminal->pvt->match_start.column,
@@ -5682,6 +5838,7 @@ vte_terminal_match_hilite_hide(VteTerminal *terminal)
 static void
 vte_terminal_match_hilite_update(VteTerminal *terminal, long x, long y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int start, end, width, height;
 	char *match;
 	struct _VteCharAttributes *attr;
@@ -5776,6 +5933,7 @@ vte_terminal_match_hilite_update(VteTerminal *terminal, long x, long y)
 static void
 vte_terminal_match_hilite(VteTerminal *terminal, long x, long y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int width, height;
 
 	width = terminal->char_width;
@@ -5808,6 +5966,7 @@ vte_terminal_match_hilite(VteTerminal *terminal, long x, long y)
 static void
 vte_terminal_clear_cb(GtkClipboard *clipboard, gpointer owner)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	terminal = owner;
 	if (terminal->pvt->has_selection) {
@@ -5821,6 +5980,7 @@ static void
 vte_terminal_copy_cb(GtkClipboard *clipboard, GtkSelectionData *data,
 		     guint info, gpointer owner)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	terminal = owner;
 	if (terminal->pvt->selection != NULL) {
@@ -5879,6 +6039,7 @@ vte_terminal_get_text_range(VteTerminal *terminal,
 			    gpointer data,
 			    GArray *attributes)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), NULL);
 	return vte_terminal_get_text_range_maybe_wrapped(terminal,
 							 start_row, start_col,
@@ -5900,6 +6061,7 @@ vte_terminal_get_text_range_maybe_wrapped(VteTerminal *terminal,
 					  GArray *attributes,
 					  gboolean include_trailing_spaces)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long col, row, last_empty, last_emptycol, last_nonempty, last_nonemptycol;
 	VteScreen *screen;
 	struct vte_charcell *pcell = NULL;
@@ -6036,6 +6198,7 @@ vte_terminal_get_text_maybe_wrapped(VteTerminal *terminal,
 				    GArray *attributes,
 				    gboolean include_trailing_spaces)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long start_row, start_col, end_row, end_col;
 	start_row = terminal->pvt->screen->scroll_delta;
 	start_col = 0;
@@ -6074,6 +6237,7 @@ vte_terminal_get_text(VteTerminal *terminal,
 		      gpointer data,
 		      GArray *attributes)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), NULL);
 	return vte_terminal_get_text_maybe_wrapped(terminal,
 						   TRUE,
@@ -6110,6 +6274,7 @@ vte_terminal_get_text_include_trailing_spaces(VteTerminal *terminal,
 					      gpointer data,
 					      GArray *attributes)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), NULL);
 	return vte_terminal_get_text_maybe_wrapped(terminal,
 						   TRUE,
@@ -6135,6 +6300,7 @@ void
 vte_terminal_get_cursor_position(VteTerminal *terminal,
 				 glong *column, glong *row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	if (column) {
 		*column = terminal->pvt->screen->cursor_current.col;
@@ -6147,6 +6313,7 @@ vte_terminal_get_cursor_position(VteTerminal *terminal,
 static GtkClipboard *
 vte_terminal_clipboard_get(VteTerminal *terminal, GdkAtom board)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkDisplay *display;
 	display = gtk_widget_get_display(&terminal->widget);
 	return gtk_clipboard_get_for_display(display, board);
@@ -6157,6 +6324,7 @@ vte_terminal_clipboard_get(VteTerminal *terminal, GdkAtom board)
 static void
 vte_terminal_copy(VteTerminal *terminal, GdkAtom board)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkClipboard *clipboard;
 	static GtkTargetEntry *targets = NULL;
 	static gint n_targets = 0;
@@ -6211,6 +6379,7 @@ vte_terminal_copy(VteTerminal *terminal, GdkAtom board)
 static void
 vte_terminal_paste(VteTerminal *terminal, GdkAtom board)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkClipboard *clipboard;
 	clipboard = vte_terminal_clipboard_get(terminal, board);
 	if (clipboard != NULL) {
@@ -6225,6 +6394,7 @@ vte_terminal_paste(VteTerminal *terminal, GdkAtom board)
 static glong
 find_start_column (VteTerminal *terminal, glong col, glong row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row_data = _vte_terminal_find_row_data (terminal, row);
 	if (G_UNLIKELY (col < 0))
 		return col;
@@ -6239,6 +6409,7 @@ find_start_column (VteTerminal *terminal, glong col, glong row)
 static glong
 find_end_column (VteTerminal *terminal, glong col, glong row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row_data = _vte_terminal_find_row_data (terminal, row);
 	gint columns = 0;
 	if (G_UNLIKELY (col < 0))
@@ -6258,6 +6429,7 @@ find_end_column (VteTerminal *terminal, glong col, glong row)
 static void
 vte_terminal_invalidate_selection (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_invalidate_region (terminal,
 				terminal->pvt->selection_start.col,
 				terminal->pvt->selection_end.col,
@@ -6272,6 +6444,7 @@ static void
 vte_terminal_start_selection(VteTerminal *terminal, GdkEventButton *event,
 			     enum vte_selection_type selection_type)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long delta;
 
 	if (terminal->pvt->selection_block_mode)
@@ -6319,6 +6492,7 @@ vte_terminal_start_selection(VteTerminal *terminal, GdkEventButton *event,
 static long
 math_div (long a, long b)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (G_LIKELY (a >= 0))
 		return a / b;
 	else
@@ -6329,6 +6503,7 @@ math_div (long a, long b)
 static void
 vte_terminal_extend_selection_expand (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long i, j;
 	VteScreen *screen;
 	VteRowData *rowdata;
@@ -6537,6 +6712,7 @@ static void
 vte_terminal_extend_selection(VteTerminal *terminal, long x, long y,
 			      gboolean always_grow, gboolean force)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	int width, height;
 	long delta, residual;
@@ -6782,6 +6958,7 @@ static void
 vte_terminal_set_selection_block_mode (VteTerminal *terminal,
 				       gboolean     selection_block_mode)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (G_LIKELY (!terminal->pvt->has_selection))
 		return;
 
@@ -6813,6 +6990,7 @@ vte_terminal_set_selection_block_mode (VteTerminal *terminal,
 void
 vte_terminal_select_all (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long delta;
 
 	g_return_if_fail (VTE_IS_TERMINAL (terminal));
@@ -6856,6 +7034,7 @@ vte_terminal_select_all (VteTerminal *terminal)
 void
 vte_terminal_select_none (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail (VTE_IS_TERMINAL (terminal));
 
 	_vte_debug_print(VTE_DEBUG_SELECTION, "Clearing selection.\n");
@@ -6869,6 +7048,7 @@ vte_terminal_select_none (VteTerminal *terminal)
 static gboolean
 vte_terminal_autoscroll(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean extend = FALSE;
 	long x, y, xmax, ymax;
 	glong adj;
@@ -6929,6 +7109,7 @@ vte_terminal_autoscroll(VteTerminal *terminal)
 static void
 vte_terminal_start_autoscroll(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->mouse_autoscroll_tag == 0) {
 		terminal->pvt->mouse_autoscroll_tag =
 			g_timeout_add_full(G_PRIORITY_LOW,
@@ -6943,6 +7124,7 @@ vte_terminal_start_autoscroll(VteTerminal *terminal)
 static void
 vte_terminal_stop_autoscroll(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->mouse_autoscroll_tag != 0) {
 		g_source_remove(terminal->pvt->mouse_autoscroll_tag);
 		terminal->pvt->mouse_autoscroll_tag = 0;
@@ -6953,6 +7135,7 @@ vte_terminal_stop_autoscroll(VteTerminal *terminal)
 static gboolean
 vte_terminal_motion_notify(GtkWidget *widget, GdkEventMotion *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	int width, height;
 	long x, y;
@@ -7039,6 +7222,7 @@ vte_terminal_motion_notify(GtkWidget *widget, GdkEventMotion *event)
 static gint
 vte_terminal_button_press(GtkWidget *widget, GdkEventButton *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	long height, width, delta;
 	gboolean handled = FALSE;
@@ -7196,6 +7380,7 @@ vte_terminal_button_press(GtkWidget *widget, GdkEventButton *event)
 static gint
 vte_terminal_button_release(GtkWidget *widget, GdkEventButton *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	gboolean handled = FALSE;
 	int x, y;
@@ -7269,6 +7454,7 @@ vte_terminal_button_release(GtkWidget *widget, GdkEventButton *event)
 static gboolean
 vte_terminal_focus_in(GtkWidget *widget, GdkEventFocus *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 
 	_vte_debug_print(VTE_DEBUG_EVENTS, "Focus in.\n");
@@ -7298,6 +7484,7 @@ vte_terminal_focus_in(GtkWidget *widget, GdkEventFocus *event)
 static gboolean
 vte_terminal_focus_out(GtkWidget *widget, GdkEventFocus *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	_vte_debug_print(VTE_DEBUG_EVENTS, "Focus out.\n");
 	terminal = VTE_TERMINAL(widget);
@@ -7327,6 +7514,7 @@ vte_terminal_focus_out(GtkWidget *widget, GdkEventFocus *event)
 static gboolean
 vte_terminal_enter(GtkWidget *widget, GdkEventCrossing *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean ret = FALSE;
 	_vte_debug_print(VTE_DEBUG_EVENTS, "Enter.\n");
 	if (GTK_WIDGET_CLASS (vte_terminal_parent_class)->enter_notify_event) {
@@ -7344,6 +7532,7 @@ vte_terminal_enter(GtkWidget *widget, GdkEventCrossing *event)
 static gboolean
 vte_terminal_leave(GtkWidget *widget, GdkEventCrossing *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean ret = FALSE;
 	_vte_debug_print(VTE_DEBUG_EVENTS, "Leave.\n");
 	if (GTK_WIDGET_CLASS (vte_terminal_parent_class)->leave_notify_event) {
@@ -7364,6 +7553,7 @@ vte_terminal_leave(GtkWidget *widget, GdkEventCrossing *event)
 static G_GNUC_UNUSED inline const char *
 visibility_state_str(GdkVisibilityState state)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	switch(state){
 		case GDK_VISIBILITY_FULLY_OBSCURED:
 			return "fully-obscured";
@@ -7377,6 +7567,7 @@ visibility_state_str(GdkVisibilityState state)
 static void
 vte_terminal_set_visibility (VteTerminal *terminal, GdkVisibilityState state)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_MISC, "change visibility: %s -> %s.\n",
 			visibility_state_str(terminal->pvt->visibility_state),
 			visibility_state_str(state));
@@ -7412,6 +7603,7 @@ vte_terminal_set_visibility (VteTerminal *terminal, GdkVisibilityState state)
 static gboolean
 vte_terminal_visibility_notify(GtkWidget *widget, GdkEventVisibility *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	terminal = VTE_TERMINAL(widget);
 
@@ -7428,6 +7620,7 @@ static void
 vte_terminal_apply_metrics(VteTerminal *terminal,
 			   gint width, gint height, gint ascent, gint descent)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean resize = FALSE, cresize = FALSE;
 	gint line_thickness;
 
@@ -7478,6 +7671,7 @@ vte_terminal_apply_metrics(VteTerminal *terminal,
 static void
 vte_terminal_ensure_font (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->draw != NULL) {
 		/* Load default fonts, if no fonts have been loaded. */
 		if (!terminal->pvt->has_fonts) {
@@ -7521,6 +7715,7 @@ vte_terminal_set_font_full(VteTerminal *terminal,
 			   const PangoFontDescription *font_desc,
 			   VteTerminalAntiAlias antialias)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         vte_terminal_set_font_full_internal(terminal, font_desc, antialias);
 }
 
@@ -7529,6 +7724,7 @@ vte_terminal_set_font_full_internal(VteTerminal *terminal,
                                     const PangoFontDescription *font_desc,
                                     VteTerminalAntiAlias antialias)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
         GObject *object;
 	PangoFontDescription *desc;
@@ -7604,6 +7800,7 @@ void
 vte_terminal_set_font(VteTerminal *terminal,
 		      const PangoFontDescription *font_desc)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	vte_terminal_set_font_full_internal(terminal, font_desc,
                                             VTE_ANTI_ALIAS_USE_DEFAULT);
@@ -7614,6 +7811,7 @@ vte_terminal_set_font_from_string_full_internal(VteTerminal *terminal,
                                                 const char *name,
                                                 VteTerminalAntiAlias antialias)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	PangoFontDescription *font_desc = NULL;
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 
@@ -7640,6 +7838,7 @@ void
 vte_terminal_set_font_from_string_full(VteTerminal *terminal, const char *name,
 				       VteTerminalAntiAlias antialias)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         vte_terminal_set_font_from_string_full_internal(terminal, name, antialias);
 }
 
@@ -7655,6 +7854,7 @@ vte_terminal_set_font_from_string_full(VteTerminal *terminal, const char *name,
 void
 vte_terminal_set_font_from_string(VteTerminal *terminal, const char *name)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_return_if_fail(name != NULL);
 	vte_terminal_set_font_from_string_full_internal(terminal, name,
@@ -7674,6 +7874,7 @@ vte_terminal_set_font_from_string(VteTerminal *terminal, const char *name)
 const PangoFontDescription *
 vte_terminal_get_font(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), NULL);
 	return terminal->pvt->fontdesc;
 }
@@ -7682,6 +7883,7 @@ vte_terminal_get_font(VteTerminal *terminal)
 static void
 vte_terminal_refresh_size(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int rows, columns;
 	if (terminal->pvt->pty_master != -1) {
 		/* Use an ioctl to read the size of the terminal. */
@@ -7710,6 +7912,7 @@ vte_terminal_refresh_size(VteTerminal *terminal)
 void
 vte_terminal_set_size(VteTerminal *terminal, glong columns, glong rows)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	glong old_columns, old_rows;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -7745,6 +7948,7 @@ vte_terminal_set_size(VteTerminal *terminal, glong columns, glong rows)
 static void
 vte_terminal_handle_scroll(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long dy, adj;
 	VteScreen *screen;
 
@@ -7779,6 +7983,7 @@ vte_terminal_set_scroll_adjustments(GtkWidget *widget,
 				    GtkAdjustment *hadjustment G_GNUC_UNUSED,
 				    GtkAdjustment *adjustment)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal = VTE_TERMINAL (widget);
 
 	if (adjustment != NULL && adjustment == terminal->adjustment)
@@ -7825,6 +8030,7 @@ vte_terminal_set_scroll_adjustments(GtkWidget *widget,
 void
 vte_terminal_set_emulation(VteTerminal *terminal, const char *emulation)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
         GObject *object;
 	int columns, rows;
@@ -7908,6 +8114,7 @@ vte_terminal_set_emulation(VteTerminal *terminal, const char *emulation)
 const char *
 vte_terminal_get_default_emulation(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return VTE_DEFAULT_EMULATION;
 }
 
@@ -7923,6 +8130,7 @@ vte_terminal_get_default_emulation(VteTerminal *terminal)
 const char *
 vte_terminal_get_emulation(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), NULL);
 	return terminal->pvt->emulation;
 }
@@ -7930,6 +8138,7 @@ vte_terminal_get_emulation(VteTerminal *terminal)
 void
 _vte_terminal_inline_error_message(VteTerminal *terminal, const char *format, ...)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	va_list ap;
 	char *str;
 
@@ -7948,6 +8157,7 @@ static void
 vte_terminal_set_termcap(VteTerminal *terminal, const char *path,
 			 gboolean reset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         GObject *object = G_OBJECT(terminal);
 	struct stat st;
 	char *wpath;
@@ -7996,6 +8206,7 @@ vte_terminal_set_termcap(VteTerminal *terminal, const char *path,
 static void
 vte_terminal_reset_rowdata(VteRing **ring, glong lines)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRing *new_ring;
 	VteRowData *row;
 	long i, next;
@@ -8027,6 +8238,7 @@ vte_terminal_reset_rowdata(VteRing **ring, glong lines)
 static void
 _vte_terminal_codeset_changed_cb(struct _vte_iso2022_state *state, gpointer p)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_set_encoding(p, _vte_iso2022_state_get_codeset(state));
 }
 
@@ -8036,6 +8248,7 @@ _vte_terminal_codeset_changed_cb(struct _vte_iso2022_state *state, gpointer p)
 static void
 vte_terminal_init(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalPrivate *pvt;
 
 	_vte_debug_print(VTE_DEBUG_LIFECYCLE, "vte_terminal_init()\n");
@@ -8181,6 +8394,7 @@ vte_terminal_init(VteTerminal *terminal)
 static void
 vte_terminal_size_request(GtkWidget *widget, GtkRequisition *requisition)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 
 	_vte_debug_print(VTE_DEBUG_LIFECYCLE, "vte_terminal_size_request()\n");
@@ -8221,6 +8435,7 @@ vte_terminal_size_request(GtkWidget *widget, GtkRequisition *requisition)
 static void
 vte_terminal_size_allocate(GtkWidget *widget, GtkAllocation *allocation)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	glong width, height;
 	gboolean repaint, update_scrollback;
@@ -8305,6 +8520,7 @@ vte_terminal_size_allocate(GtkWidget *widget, GtkAllocation *allocation)
 static void
 root_pixmap_changed_cb(VteBg *bg, VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print (VTE_DEBUG_EVENTS, "Root pixmap changed.\n");
 	if (terminal->pvt->bg_transparent) {
 		vte_terminal_queue_background_update(terminal);
@@ -8315,6 +8531,7 @@ root_pixmap_changed_cb(VteBg *bg, VteTerminal *terminal)
 static void
 vte_terminal_unrealize(GtkWidget *widget)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 
 	_vte_debug_print(VTE_DEBUG_LIFECYCLE, "vte_terminal_unrealize()\n");
@@ -8414,6 +8631,7 @@ vte_terminal_sync_settings (GtkSettings *settings,
                             GParamSpec *pspec,
                             VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt = terminal->pvt;
         gboolean blink;
         int blink_time = 1000;
@@ -8440,6 +8658,7 @@ static void
 vte_terminal_screen_changed (GtkWidget *widget,
                              GdkScreen *previous_screen)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminal *terminal = VTE_TERMINAL (widget);
         GdkScreen *screen;
         GtkSettings *settings;
@@ -8474,6 +8693,7 @@ vte_terminal_screen_changed (GtkWidget *widget,
 static void
 vte_terminal_finalize(GObject *object)
 {
+	printf ("Entering %s\n", __FUNCTION__);
     	GtkWidget *widget = GTK_WIDGET (object);
     	VteTerminal *terminal = VTE_TERMINAL (object);
 	GtkWidget *toplevel;
@@ -8652,6 +8872,7 @@ vte_terminal_finalize(GObject *object)
 static void
 vte_terminal_realize(GtkWidget *widget)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	GdkWindowAttr attributes;
         GdkColor color;
@@ -8785,6 +9006,7 @@ vte_terminal_determine_colors(VteTerminal *terminal,
 			      gboolean cursor,
 			      int *fore, int *back)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* Determine what the foreground and background colors for rendering
 	 * text should be.  If highlight is set and we have a highlight color,
 	 * use that scheme.  If cursor is set and we have a cursor color, use
@@ -8841,6 +9063,7 @@ vte_terminal_determine_colors(VteTerminal *terminal,
 static gboolean
 vte_unichar_is_local_graphic(vteunistr c)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if ((c >= 0x2500) && (c <= 0x257f)) {
 		return TRUE;
 	}
@@ -8880,6 +9103,7 @@ vte_unichar_is_local_graphic(vteunistr c)
 static gboolean
 vte_terminal_unichar_is_local_graphic(VteTerminal *terminal, vteunistr c, gboolean bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return vte_unichar_is_local_graphic (c) &&
 		!_vte_draw_has_char (terminal->pvt->draw, c, bold);
 }
@@ -8892,6 +9116,7 @@ vte_terminal_fill_rectangle_int(VteTerminal *terminal,
 				gint width,
 				gint height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkColor color;
 	gboolean wasdrawing;
 
@@ -8919,6 +9144,7 @@ vte_terminal_fill_rectangle(VteTerminal *terminal,
 			    gint width,
 			    gint height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_fill_rectangle_int(terminal, entry, x, y, width, height);
 }
 
@@ -8930,6 +9156,7 @@ vte_terminal_draw_line(VteTerminal *terminal,
 		       gint xp,
 		       gint yp)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_fill_rectangle(terminal, entry,
 				    x, y,
 				    MAX(VTE_LINE_WIDTH, xp - x + 1), MAX(VTE_LINE_WIDTH, yp - y + 1));
@@ -8943,6 +9170,7 @@ vte_terminal_draw_rectangle(VteTerminal *terminal,
 			    gint width,
 			    gint height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_draw_line(terminal, entry,
 			       x, y, x, y + height);
 	vte_terminal_draw_line(terminal, entry,
@@ -8959,6 +9187,7 @@ vte_terminal_draw_point(VteTerminal *terminal,
 			gint x,
 			gint y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_fill_rectangle(terminal, entry, x, y, 1, 1);
 }
 
@@ -8971,6 +9200,7 @@ vte_terminal_draw_graphic(VteTerminal *terminal, vteunistr c,
 			  gint column_width, gint columns, gint row_height,
 			  gboolean bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean ret;
 	gint xcenter, xright, ycenter, ybottom, i, j, draw;
 	struct _vte_draw_text_request request;
@@ -9737,6 +9967,7 @@ vte_terminal_draw_cells(VteTerminal *terminal,
 			gboolean strikethrough, gboolean hilite, gboolean boxed,
 			gint column_width, gint row_height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i, x, y, ascent;
 	gint columns = 0;
 	GdkColor color = {0,};
@@ -9845,6 +10076,7 @@ vte_terminal_draw_cells(VteTerminal *terminal,
 static guint
 _vte_terminal_map_pango_color(VteTerminal *terminal, PangoColor *color)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long distance[G_N_ELEMENTS(terminal->pvt->palette)];
 	struct vte_palette_entry *entry;
 	guint i, ret;
@@ -9889,6 +10121,7 @@ static void
 _vte_terminal_fudge_pango_colors(VteTerminal *terminal, GSList *attributes,
 				 struct vte_charcell *cells, gssize n)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i, sumlen = 0;
 	struct _fudge_cell_props{
 		gboolean saw_fg, saw_bg;
@@ -9960,6 +10193,7 @@ static void
 _vte_terminal_apply_pango_attr(VteTerminal *terminal, PangoAttribute *attr,
 			       struct vte_charcell *cells, guint n_cells)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint i, ival;
 	PangoAttrInt *attrint;
 	PangoAttrColor *attrcolor;
@@ -10021,12 +10255,14 @@ _vte_terminal_apply_pango_attr(VteTerminal *terminal, PangoAttribute *attr,
 static void
 _vte_terminal_pango_attribute_destroy(gpointer attr, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	pango_attribute_destroy(attr);
 }
 static void
 _vte_terminal_translate_pango_cells(VteTerminal *terminal, PangoAttrList *attrs,
 				    struct vte_charcell *cells, guint n_cells)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	PangoAttribute *attr;
 	PangoAttrIterator *attriter;
 	GSList *list, *listiter;
@@ -10078,6 +10314,7 @@ vte_terminal_draw_cells_with_attributes(VteTerminal *terminal,
 					gboolean draw_default_bg,
 					gint column_width, gint height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i, j, cell_count;
 	struct vte_charcell *cells;
 	char scratch_buf[VTE_UTF8_BPC];
@@ -10122,6 +10359,7 @@ vte_terminal_draw_rows(VteTerminal *terminal,
 		      gint start_x, gint start_y,
 		      gint column_width, gint row_height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_draw_text_request items[4*VTE_DRAW_MAX_LENGTH];
 	gint i, j, row, rows, x, y, end_column;
 	gint fore, nfore, back, nback;
@@ -10483,6 +10721,7 @@ fg_out:
 static void
 vte_terminal_expand_region (VteTerminal *terminal, GdkRegion *region, const GdkRectangle *area)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	int width, height;
 	int row, col, row_stop, col_stop;
@@ -10530,6 +10769,7 @@ vte_terminal_expand_region (VteTerminal *terminal, GdkRegion *region, const GdkR
 static void
 vte_terminal_paint_area (VteTerminal *terminal, const GdkRectangle *area)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	int width, height, delta;
 	int row, col, row_stop, col_stop;
@@ -10606,6 +10846,7 @@ vte_terminal_paint_area (VteTerminal *terminal, const GdkRectangle *area)
 static void
 vte_terminal_paint_cursor(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	GdkColor color;
 	struct vte_charcell *cell;
@@ -10755,6 +10996,7 @@ vte_terminal_paint_cursor(VteTerminal *terminal)
 static void
 vte_terminal_paint_im_preedit_string(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	int row, drow, col, columns;
 	long width, height, ascent, descent, delta;
@@ -10836,6 +11078,7 @@ vte_terminal_paint_im_preedit_string(VteTerminal *terminal)
 static void
 vte_terminal_paint(GtkWidget *widget, GdkRegion *region)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 
 	_vte_debug_print(VTE_DEBUG_LIFECYCLE, "vte_terminal_paint()\n");
@@ -10909,6 +11152,7 @@ vte_terminal_paint(GtkWidget *widget, GdkRegion *region)
 static gint
 vte_terminal_expose(GtkWidget *widget, GdkEventExpose *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal = VTE_TERMINAL (widget);
 	/* Beware the out of order events -
 	 *   do not even think about skipping exposes! */
@@ -10948,6 +11192,7 @@ vte_terminal_expose(GtkWidget *widget, GdkEventExpose *event)
 static gboolean
 vte_terminal_scroll(GtkWidget *widget, GdkEventScroll *event)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkAdjustment *adj;
 	VteTerminal *terminal;
 	gdouble v;
@@ -11054,6 +11299,7 @@ vte_terminal_scroll(GtkWidget *widget, GdkEventScroll *event)
 static AtkObject *
 vte_terminal_get_accessible(GtkWidget *widget)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	static gboolean first_time = TRUE;
 
@@ -11094,6 +11340,7 @@ vte_terminal_get_property (GObject *object,
                            GValue *value,
                            GParamSpec *pspec)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminal *terminal = VTE_TERMINAL (object);
         VteTerminalPrivate *pvt = terminal->pvt;
 
@@ -11187,6 +11434,7 @@ vte_terminal_set_property (GObject *object,
                            const GValue *value,
                            GParamSpec *pspec)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminal *terminal = VTE_TERMINAL (object);
         VteTerminalPrivate *pvt = terminal->pvt;
 
@@ -11278,6 +11526,7 @@ vte_terminal_set_property (GObject *object,
 static void
 vte_terminal_class_init(VteTerminalClass *klass)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GObjectClass *gobject_class;
 	GtkWidgetClass *widget_class;
 	GtkBindingSet  *binding_set;
@@ -12354,6 +12603,7 @@ vte_terminal_class_init(VteTerminalClass *klass)
 void
 vte_terminal_set_audible_bell(VteTerminal *terminal, gboolean is_audible)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -12381,6 +12631,7 @@ vte_terminal_set_audible_bell(VteTerminal *terminal, gboolean is_audible)
 gboolean
 vte_terminal_get_audible_bell(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), FALSE);
 	return terminal->pvt->audible_bell;
 }
@@ -12398,6 +12649,7 @@ vte_terminal_get_audible_bell(VteTerminal *terminal)
 void
 vte_terminal_set_visible_bell(VteTerminal *terminal, gboolean is_visible)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -12426,6 +12678,7 @@ vte_terminal_set_visible_bell(VteTerminal *terminal, gboolean is_visible)
 gboolean
 vte_terminal_get_visible_bell(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), FALSE);
 	return terminal->pvt->visible_bell;
 }
@@ -12443,6 +12696,7 @@ vte_terminal_get_visible_bell(VteTerminal *terminal)
 void
 vte_terminal_set_allow_bold(VteTerminal *terminal, gboolean allow_bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -12471,6 +12725,7 @@ vte_terminal_set_allow_bold(VteTerminal *terminal, gboolean allow_bold)
 gboolean
 vte_terminal_get_allow_bold(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), FALSE);
 	return terminal->pvt->allow_bold;
 }
@@ -12490,6 +12745,7 @@ vte_terminal_get_allow_bold(VteTerminal *terminal)
 void
 vte_terminal_set_scroll_background(VteTerminal *terminal, gboolean scroll)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -12519,6 +12775,7 @@ vte_terminal_set_scroll_background(VteTerminal *terminal, gboolean scroll)
 void
 vte_terminal_set_scroll_on_output(VteTerminal *terminal, gboolean scroll)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	terminal->pvt->scroll_on_output = scroll;
 }
@@ -12536,6 +12793,7 @@ vte_terminal_set_scroll_on_output(VteTerminal *terminal, gboolean scroll)
 void
 vte_terminal_set_scroll_on_keystroke(VteTerminal *terminal, gboolean scroll)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -12554,6 +12812,7 @@ vte_terminal_set_scroll_on_keystroke(VteTerminal *terminal, gboolean scroll)
 static void
 vte_terminal_real_copy_clipboard(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SELECTION, "Copying to CLIPBOARD.\n");
 	if (terminal->pvt->selection != NULL) {
 		GtkClipboard *clipboard;
@@ -12574,6 +12833,7 @@ vte_terminal_real_copy_clipboard(VteTerminal *terminal)
 void
 vte_terminal_copy_clipboard(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_signal_emit (terminal, signals[COPY_CLIPBOARD], 0);
 }
@@ -12581,6 +12841,7 @@ vte_terminal_copy_clipboard(VteTerminal *terminal)
 static void
 vte_terminal_real_paste_clipboard(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SELECTION, "Pasting CLIPBOARD.\n");
 	vte_terminal_paste(terminal, GDK_SELECTION_CLIPBOARD);
 }
@@ -12597,6 +12858,7 @@ vte_terminal_real_paste_clipboard(VteTerminal *terminal)
 void
 vte_terminal_paste_clipboard(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_signal_emit (terminal, signals[PASTE_CLIPBOARD], 0);
 }
@@ -12612,6 +12874,7 @@ vte_terminal_paste_clipboard(VteTerminal *terminal)
 void
 vte_terminal_copy_primary(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	_vte_debug_print(VTE_DEBUG_SELECTION, "Copying to PRIMARY.\n");
 	vte_terminal_copy(terminal, GDK_SELECTION_PRIMARY);
@@ -12631,6 +12894,7 @@ vte_terminal_copy_primary(VteTerminal *terminal)
 void
 vte_terminal_paste_primary(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	_vte_debug_print(VTE_DEBUG_SELECTION, "Pasting PRIMARY.\n");
 	vte_terminal_paste(terminal, GDK_SELECTION_PRIMARY);
@@ -12649,6 +12913,7 @@ vte_terminal_paste_primary(VteTerminal *terminal)
 void
 vte_terminal_im_append_menuitems(VteTerminal *terminal, GtkMenuShell *menushell)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkIMMulticontext *context;
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_return_if_fail(GTK_WIDGET_REALIZED(terminal));
@@ -12660,6 +12925,7 @@ vte_terminal_im_append_menuitems(VteTerminal *terminal, GtkMenuShell *menushell)
 static gboolean
 vte_terminal_background_update(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkColormap *colormap;
 	GdkColor bgcolor;
 	double saturation;
@@ -12757,6 +13023,7 @@ vte_terminal_background_update(VteTerminal *terminal)
 static void
 vte_terminal_queue_background_update(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_EVENTS,
 			"Queued background update.\n");
 	terminal->pvt->bg_update_pending = TRUE;
@@ -12781,6 +13048,7 @@ vte_terminal_queue_background_update(VteTerminal *terminal)
 void
 vte_terminal_set_background_saturation(VteTerminal *terminal, double saturation)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 	guint v;
 
@@ -12825,6 +13093,7 @@ void
 vte_terminal_set_background_tint_color(VteTerminal *terminal,
 				       const GdkColor *color)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -12862,6 +13131,7 @@ void
 vte_terminal_set_background_transparent(VteTerminal *terminal,
 					gboolean transparent)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -12899,6 +13169,7 @@ vte_terminal_set_background_transparent(VteTerminal *terminal,
 void
 vte_terminal_set_background_image(VteTerminal *terminal, GdkPixbuf *image)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
         GObject *object;
 
@@ -12959,6 +13230,7 @@ vte_terminal_set_background_image(VteTerminal *terminal, GdkPixbuf *image)
 void
 vte_terminal_set_background_image_file(VteTerminal *terminal, const char *path)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
         GObject *object;
 
@@ -13004,6 +13276,7 @@ vte_terminal_set_background_image_file(VteTerminal *terminal, const char *path)
 gboolean
 vte_terminal_get_has_selection(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), FALSE);
 	return terminal->pvt->has_selection;
 }
@@ -13024,6 +13297,7 @@ vte_terminal_get_has_selection(VteTerminal *terminal)
 gboolean
 vte_terminal_get_using_xft(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), TRUE);
 	return TRUE;
 }
@@ -13031,6 +13305,7 @@ vte_terminal_get_using_xft(VteTerminal *terminal)
 static void
 vte_terminal_set_cursor_blinks_internal(VteTerminal *terminal, gboolean blink)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt = terminal->pvt;
 
 	blink = !!blink;
@@ -13061,6 +13336,7 @@ vte_terminal_set_cursor_blinks_internal(VteTerminal *terminal, gboolean blink)
 void
 vte_terminal_set_cursor_blinks(VteTerminal *terminal, gboolean blink)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         vte_terminal_set_cursor_blink_mode(terminal, blink ? VTE_CURSOR_BLINK_ON : VTE_CURSOR_BLINK_OFF);
 }
 
@@ -13077,6 +13353,7 @@ vte_terminal_set_cursor_blinks(VteTerminal *terminal, gboolean blink)
 void
 vte_terminal_set_cursor_blink_mode(VteTerminal *terminal, VteTerminalCursorBlinkMode mode)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
         gboolean blinks;
 
@@ -13120,6 +13397,7 @@ vte_terminal_set_cursor_blink_mode(VteTerminal *terminal, VteTerminalCursorBlink
 VteTerminalCursorBlinkMode
 vte_terminal_get_cursor_blink_mode(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         g_return_val_if_fail(VTE_IS_TERMINAL(terminal), VTE_CURSOR_BLINK_SYSTEM);
 
         return terminal->pvt->cursor_blink_mode;
@@ -13137,6 +13415,7 @@ vte_terminal_get_cursor_blink_mode(VteTerminal *terminal)
 void
 vte_terminal_set_cursor_shape(VteTerminal *terminal, VteTerminalCursorShape shape)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -13164,6 +13443,7 @@ vte_terminal_set_cursor_shape(VteTerminal *terminal, VteTerminalCursorShape shap
 VteTerminalCursorShape
 vte_terminal_get_cursor_shape(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         g_return_val_if_fail(VTE_IS_TERMINAL(terminal), VTE_CURSOR_SHAPE_BLOCK);
 
         return terminal->pvt->cursor_shape;
@@ -13185,6 +13465,7 @@ vte_terminal_get_cursor_shape(VteTerminal *terminal)
 void
 vte_terminal_set_scrollback_lines(VteTerminal *terminal, glong lines)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
         GObject *object;
 	glong scroll_delta;
@@ -13262,6 +13543,7 @@ vte_terminal_set_scrollback_lines(VteTerminal *terminal, glong lines)
 void
 vte_terminal_set_word_chars(VteTerminal *terminal, const char *spec)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteConv conv;
 	gunichar *wbuf;
 	guchar *ibuf, *ibufptr, *obuf, *obufptr;
@@ -13353,6 +13635,7 @@ void
 vte_terminal_set_backspace_binding(VteTerminal *terminal,
 				   VteTerminalEraseBinding binding)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -13382,6 +13665,7 @@ void
 vte_terminal_set_delete_binding(VteTerminal *terminal,
 				VteTerminalEraseBinding binding)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -13410,6 +13694,7 @@ vte_terminal_set_delete_binding(VteTerminal *terminal,
 void
 vte_terminal_set_mouse_autohide(VteTerminal *terminal, gboolean setting)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalPrivate *pvt;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -13439,6 +13724,7 @@ vte_terminal_set_mouse_autohide(VteTerminal *terminal, gboolean setting)
 gboolean
 vte_terminal_get_mouse_autohide(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), FALSE);
 	return terminal->pvt->mouse_autohide;
 }
@@ -13458,6 +13744,7 @@ vte_terminal_get_mouse_autohide(VteTerminal *terminal)
 void
 vte_terminal_reset(VteTerminal *terminal, gboolean full, gboolean clear_history)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 
         g_object_freeze_notify(G_OBJECT(terminal));
@@ -13616,6 +13903,7 @@ vte_terminal_reset(VteTerminal *terminal, gboolean full, gboolean clear_history)
 const char *
 vte_terminal_get_status_line(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), NULL);
 	return terminal->pvt->screen->status_line_contents->str;
 }
@@ -13640,6 +13928,7 @@ vte_terminal_get_status_line(VteTerminal *terminal)
 void
 vte_terminal_get_padding(VteTerminal *terminal, int *xpad, int *ypad)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	g_return_if_fail(xpad != NULL);
 	g_return_if_fail(ypad != NULL);
@@ -13658,6 +13947,7 @@ vte_terminal_get_padding(VteTerminal *terminal, int *xpad, int *ypad)
 GtkAdjustment *
 vte_terminal_get_adjustment(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), NULL);
 	return terminal->adjustment;
 }
@@ -13673,6 +13963,7 @@ vte_terminal_get_adjustment(VteTerminal *terminal)
 glong
 vte_terminal_get_char_width(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), -1);
 	vte_terminal_ensure_font (terminal);
 	return terminal->char_width;
@@ -13689,6 +13980,7 @@ vte_terminal_get_char_width(VteTerminal *terminal)
 glong
 vte_terminal_get_char_height(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), -1);
 	vte_terminal_ensure_font (terminal);
 	return terminal->char_height;
@@ -13707,6 +13999,7 @@ vte_terminal_get_char_height(VteTerminal *terminal)
 glong
 vte_terminal_get_char_descent(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), -1);
 	vte_terminal_ensure_font (terminal);
 	return terminal->char_descent;
@@ -13725,6 +14018,7 @@ vte_terminal_get_char_descent(VteTerminal *terminal)
 glong
 vte_terminal_get_char_ascent(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), -1);
 	vte_terminal_ensure_font (terminal);
 	return terminal->char_ascent;
@@ -13741,6 +14035,7 @@ vte_terminal_get_char_ascent(VteTerminal *terminal)
 glong
 vte_terminal_get_row_count(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), -1);
 	return terminal->row_count;
 }
@@ -13756,6 +14051,7 @@ vte_terminal_get_row_count(VteTerminal *terminal)
 glong
 vte_terminal_get_column_count(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), -1);
 	return terminal->column_count;
 }
@@ -13771,6 +14067,7 @@ vte_terminal_get_column_count(VteTerminal *terminal)
 const char *
 vte_terminal_get_window_title(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), "");
 	return terminal->window_title;
 }
@@ -13786,6 +14083,7 @@ vte_terminal_get_window_title(VteTerminal *terminal)
 const char *
 vte_terminal_get_icon_title(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), "");
 	return terminal->icon_title;
 }
@@ -13803,6 +14101,7 @@ vte_terminal_get_icon_title(VteTerminal *terminal)
 void
 vte_terminal_set_pty(VteTerminal *terminal, int pty_master)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         long flags;
         VteTerminalPrivate *pvt;
         GObject *object;
@@ -13861,6 +14160,7 @@ vte_terminal_set_pty(VteTerminal *terminal, int pty_master)
  */
 int vte_terminal_get_pty(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   g_return_val_if_fail (VTE_IS_TERMINAL (terminal), -1);
 
   return terminal->pvt->pty_master;
@@ -13884,6 +14184,7 @@ int vte_terminal_get_pty(VteTerminal *terminal)
 int
 vte_terminal_get_child_exit_status(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         g_return_val_if_fail(VTE_IS_TERMINAL(terminal), -1);
         return terminal->pvt->child_exit_status;
 }
@@ -13893,6 +14194,7 @@ vte_terminal_get_child_exit_status(VteTerminal *terminal)
 void
 _vte_terminal_accessible_ref(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 	terminal->pvt->accessible_emit = TRUE;
 }
@@ -13900,6 +14202,7 @@ _vte_terminal_accessible_ref(VteTerminal *terminal)
 char *
 _vte_terminal_get_selection(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail(VTE_IS_TERMINAL(terminal), NULL);
 
 	return g_strdup (terminal->pvt->selection);
@@ -13908,6 +14211,7 @@ _vte_terminal_get_selection(VteTerminal *terminal)
 void
 _vte_terminal_get_start_selection(VteTerminal *terminal, long *col, long *row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct selection_cell_coords ss;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -13926,6 +14230,7 @@ _vte_terminal_get_start_selection(VteTerminal *terminal, long *col, long *row)
 void
 _vte_terminal_get_end_selection(VteTerminal *terminal, long *col, long *row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct selection_cell_coords se;
 
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
@@ -13947,6 +14252,7 @@ _vte_terminal_select_text(VteTerminal *terminal,
 			  long end_col, long end_row,
 			  int start_offset, int end_offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail(VTE_IS_TERMINAL(terminal));
 
 	terminal->pvt->selection_type = selection_type_char;
@@ -13967,12 +14273,14 @@ _vte_terminal_select_text(VteTerminal *terminal,
 void
 _vte_terminal_remove_selection(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_deselect_all (terminal);
 }
 
 static void
 add_update_timeout (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (update_timeout_tag == 0) {
 		_vte_debug_print (VTE_DEBUG_TIMEOUT,
 				"Starting update timeout\n");
@@ -14000,6 +14308,7 @@ add_update_timeout (VteTerminal *terminal)
 static void
 reset_update_regions (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->update_regions != NULL) {
 		g_slist_foreach (terminal->pvt->update_regions,
 				(GFunc)gdk_region_destroy, NULL);
@@ -14015,6 +14324,7 @@ reset_update_regions (VteTerminal *terminal)
 static void
 remove_from_active_list (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->active != NULL
 			&& terminal->pvt->update_regions == NULL) {
 		_vte_debug_print(VTE_DEBUG_TIMEOUT,
@@ -14044,6 +14354,7 @@ remove_from_active_list (VteTerminal *terminal)
 static void
 remove_update_timeout (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	reset_update_regions (terminal);
 	remove_from_active_list (terminal);
 }
@@ -14051,6 +14362,7 @@ remove_update_timeout (VteTerminal *terminal)
 static void
 vte_terminal_add_process_timeout (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_TIMEOUT,
 			"Adding terminal to active list\n");
 	terminal->pvt->active = active_terminals =
@@ -14067,11 +14379,13 @@ vte_terminal_add_process_timeout (VteTerminal *terminal)
 static inline gboolean
 vte_terminal_is_processing (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return terminal->pvt->active != NULL;
 }
 static inline void
 vte_terminal_start_processing (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (!vte_terminal_is_processing (terminal)) {
 		vte_terminal_add_process_timeout (terminal);
 	}
@@ -14080,12 +14394,14 @@ vte_terminal_start_processing (VteTerminal *terminal)
 static void
 vte_terminal_stop_processing (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	remove_from_active_list (terminal);
 }
 
 static inline gboolean
 need_processing (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return _vte_incoming_chunks_length (terminal->pvt->incoming) != 0;
 }
 
@@ -14093,6 +14409,7 @@ need_processing (VteTerminal *terminal)
 static void
 vte_terminal_emit_icon_title_changed(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `icon-title-changed'.\n");
 	g_signal_emit_by_name(terminal, "icon-title-changed");
@@ -14102,6 +14419,7 @@ vte_terminal_emit_icon_title_changed(VteTerminal *terminal)
 static void
 vte_terminal_emit_window_title_changed(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `window-title-changed'.\n");
 	g_signal_emit_by_name(terminal, "window-title-changed");
@@ -14110,6 +14428,7 @@ vte_terminal_emit_window_title_changed(VteTerminal *terminal)
 static void
 vte_terminal_emit_pending_signals(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         GObject *object = G_OBJECT(terminal);
 
         g_object_freeze_notify(object);
@@ -14155,6 +14474,7 @@ vte_terminal_emit_pending_signals(VteTerminal *terminal)
 
 static void time_process_incoming (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gdouble elapsed;
 	glong target;
 	g_timer_reset (process_timer);
@@ -14172,6 +14492,7 @@ static void time_process_incoming (VteTerminal *terminal)
 static gboolean
 process_timeout (gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GList *l, *next;
 	gboolean again;
 
@@ -14256,6 +14577,7 @@ process_timeout (gpointer data)
 static gboolean
 update_regions (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GSList *l;
 	GdkRegion *region;
 
@@ -14297,6 +14619,7 @@ update_regions (VteTerminal *terminal)
 static gboolean
 update_repeat_timeout (gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GList *l, *next;
 	gboolean again;
 
@@ -14394,6 +14717,7 @@ update_repeat_timeout (gpointer data)
 static gboolean
 update_timeout (gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GList *l, *next;
 	gboolean redraw = FALSE;
 
diff --git a/src/vteaccess.c b/src/vteaccess.c
index 8e5f592..6694438 100644
--- a/src/vteaccess.c
+++ b/src/vteaccess.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2002,2003 Red Hat, Inc.
  *
@@ -80,6 +81,7 @@ static const char *vte_terminal_accessible_action_descriptions[] = {
 static VteTerminalAccessiblePrivate *
 vte_terminal_accessible_new_private_data(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 	priv = g_slice_new0(VteTerminalAccessiblePrivate);
 	priv->snapshot_text = NULL;
@@ -96,6 +98,7 @@ vte_terminal_accessible_new_private_data(void)
 static void
 vte_terminal_accessible_free_private_data(VteTerminalAccessiblePrivate *priv)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gint i;
 
 	g_assert(priv != NULL);
@@ -121,6 +124,7 @@ static gint
 offset_from_xy (VteTerminalAccessiblePrivate *priv,
 		gint x, gint y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gint offset;
 	gint linebreak;
 	gint next_linebreak;
@@ -144,6 +148,7 @@ static void
 xy_from_offset (VteTerminalAccessiblePrivate *priv,
 		guint offset, gint *x, gint *y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint i, linebreak;
 	gint cur_x, cur_y;
 	gint cur_offset = 0;
@@ -175,12 +180,14 @@ xy_from_offset (VteTerminalAccessiblePrivate *priv,
 static gboolean
 all_selected(VteTerminal *terminal, glong column, glong row, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return TRUE;
 }
 
 static void
 emit_text_caret_moved(GObject *object, glong caret)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS|VTE_DEBUG_ALLY,
 			"Accessibility peer emitting "
 			"`text-caret-moved'.\n");
@@ -191,6 +198,7 @@ static void
 emit_text_changed_insert(GObject *object,
 			 const char *text, glong offset, glong len)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	glong start, count;
 	if (len == 0) {
 		return;
@@ -211,6 +219,7 @@ static void
 emit_text_changed_delete(GObject *object,
 			 const char *text, glong offset, glong len)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	glong start, count;
 	if (len == 0) {
 		return;
@@ -231,6 +240,7 @@ static void
 vte_terminal_accessible_update_private_data_if_needed(AtkObject *text,
 						      char **old, glong *olen)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	VteTerminalAccessiblePrivate *priv;
 	struct _VteCharAttributes attrs;
@@ -423,6 +433,7 @@ vte_terminal_accessible_update_private_data_if_needed(AtkObject *text,
 static void
 vte_terminal_accessible_text_modified(VteTerminal *terminal, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 	char *old, *current;
 	glong offset, caret_offset, olen, clen;
@@ -529,6 +540,7 @@ vte_terminal_accessible_text_scrolled(VteTerminal *terminal,
 				      gint howmuch,
 				      gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 	struct _VteCharAttributes attr;
 	long delta;
@@ -669,6 +681,7 @@ vte_terminal_accessible_text_scrolled(VteTerminal *terminal,
 static void
 vte_terminal_accessible_invalidate_cursor(VteTerminal *terminal, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 
 	g_assert(VTE_IS_TERMINAL_ACCESSIBLE(data));
@@ -688,6 +701,7 @@ vte_terminal_accessible_invalidate_cursor(VteTerminal *terminal, gpointer data)
 static void
 vte_terminal_accessible_title_changed(VteTerminal *terminal, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL_ACCESSIBLE(data));
 	g_assert(VTE_IS_TERMINAL(terminal));
 	atk_object_set_description(ATK_OBJECT(data), terminal->window_title);
@@ -698,6 +712,7 @@ static gboolean
 vte_terminal_accessible_focus_in(VteTerminal *terminal, GdkEventFocus *event,
 				 gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL_ACCESSIBLE(data));
 	g_assert(VTE_IS_TERMINAL(terminal));
 	g_signal_emit_by_name(data, "focus-event", TRUE);
@@ -712,6 +727,7 @@ static gboolean
 vte_terminal_accessible_focus_out(VteTerminal *terminal, GdkEventFocus *event,
 				  gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL_ACCESSIBLE(data));
 	g_assert(VTE_IS_TERMINAL(terminal));
 	g_signal_emit_by_name(data, "focus-event", FALSE);
@@ -727,6 +743,7 @@ vte_terminal_accessible_visibility_notify(VteTerminal *terminal,
 					  GdkEventVisibility *event,
 					  gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *widget;
 	gboolean visible;
 	g_assert(VTE_IS_TERMINAL_ACCESSIBLE(data));
@@ -760,6 +777,7 @@ static void
 vte_terminal_accessible_selection_changed (VteTerminal *terminal,
 					   gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL_ACCESSIBLE(data));
 	g_assert(VTE_IS_TERMINAL(terminal));
 
@@ -769,6 +787,7 @@ vte_terminal_accessible_selection_changed (VteTerminal *terminal,
 static void
 vte_terminal_initialize (AtkObject *obj, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	AtkObject *parent;
 
@@ -846,6 +865,7 @@ vte_terminal_initialize (AtkObject *obj, gpointer data)
 AtkObject *
 vte_terminal_accessible_new(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	AtkObject *accessible;
 	GObject *object;
 
@@ -861,6 +881,7 @@ vte_terminal_accessible_new(VteTerminal *terminal)
 static void
 vte_terminal_accessible_finalize(GObject *object)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 	GtkAccessible *accessible = NULL;
 
@@ -930,6 +951,7 @@ static gchar *
 vte_terminal_accessible_get_text(AtkText *text,
 				 gint start_offset, gint end_offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 	int start, end;
 	gchar *ret;
@@ -993,6 +1015,7 @@ vte_terminal_accessible_get_text_somewhere(AtkText *text,
 					   gint *start_offset,
 					   gint *end_offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 	VteTerminal *terminal;
 	gunichar current, prev, next;
@@ -1243,6 +1266,7 @@ vte_terminal_accessible_get_text_before_offset(AtkText *text, gint offset,
 					       gint *start_offset,
 					       gint *end_offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL_ACCESSIBLE(text));
 	vte_terminal_accessible_update_private_data_if_needed(ATK_OBJECT(text),
 							      NULL, NULL);
@@ -1260,6 +1284,7 @@ vte_terminal_accessible_get_text_after_offset(AtkText *text, gint offset,
 					      gint *start_offset,
 					      gint *end_offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL_ACCESSIBLE(text));
 	vte_terminal_accessible_update_private_data_if_needed(ATK_OBJECT(text),
 							      NULL, NULL);
@@ -1277,6 +1302,7 @@ vte_terminal_accessible_get_text_at_offset(AtkText *text, gint offset,
 					   gint *start_offset,
 					   gint *end_offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL_ACCESSIBLE(text));
 	vte_terminal_accessible_update_private_data_if_needed(ATK_OBJECT(text),
 							      NULL, NULL);
@@ -1291,6 +1317,7 @@ vte_terminal_accessible_get_text_at_offset(AtkText *text, gint offset,
 static gunichar
 vte_terminal_accessible_get_character_at_offset(AtkText *text, gint offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 	int mapped;
 	char *unichar;
@@ -1316,6 +1343,7 @@ vte_terminal_accessible_get_character_at_offset(AtkText *text, gint offset)
 static gint
 vte_terminal_accessible_get_caret_offset(AtkText *text)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 
 	vte_terminal_accessible_update_private_data_if_needed(ATK_OBJECT(text),
@@ -1330,6 +1358,7 @@ vte_terminal_accessible_get_caret_offset(AtkText *text)
 static AtkAttributeSet *
 get_attribute_set (struct _VteCharAttributes attr)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	AtkAttributeSet *set = NULL;
 	AtkAttribute *at;
 
@@ -1364,6 +1393,7 @@ static AtkAttributeSet *
 vte_terminal_accessible_get_run_attributes(AtkText *text, gint offset,
 					   gint *start_offset, gint *end_offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 	guint i;
 	struct _VteCharAttributes cur_attr;
@@ -1411,6 +1441,7 @@ vte_terminal_accessible_get_run_attributes(AtkText *text, gint offset,
 static AtkAttributeSet *
 vte_terminal_accessible_get_default_attributes(AtkText *text)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return NULL;
 }
 
@@ -1420,6 +1451,7 @@ vte_terminal_accessible_get_character_extents(AtkText *text, gint offset,
 					      gint *width, gint *height,
 					      AtkCoordType coords)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 	VteTerminal *terminal;
 	glong char_width, char_height;
@@ -1448,6 +1480,7 @@ vte_terminal_accessible_get_character_extents(AtkText *text, gint offset,
 static gint
 vte_terminal_accessible_get_character_count(AtkText *text)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 
 	vte_terminal_accessible_update_private_data_if_needed(ATK_OBJECT(text),
@@ -1464,6 +1497,7 @@ vte_terminal_accessible_get_offset_at_point(AtkText *text,
 					    gint x, gint y,
 					    AtkCoordType coords)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalAccessiblePrivate *priv;
 	VteTerminal *terminal;
 	glong char_width, char_height;
@@ -1490,6 +1524,7 @@ vte_terminal_accessible_get_offset_at_point(AtkText *text,
 static gint
 vte_terminal_accessible_get_n_selections(AtkText *text)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *widget;
 	VteTerminal *terminal;
 
@@ -1511,6 +1546,7 @@ static gchar *
 vte_terminal_accessible_get_selection(AtkText *text, gint selection_number,
 				      gint *start_offset, gint *end_offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *widget;
 	VteTerminal *terminal;
 	VteTerminalAccessiblePrivate *priv;
@@ -1546,6 +1582,7 @@ static gboolean
 vte_terminal_accessible_add_selection(AtkText *text,
 				      gint start_offset, gint end_offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *widget;
 	VteTerminal *terminal;
 	VteTerminalAccessiblePrivate *priv;
@@ -1574,6 +1611,7 @@ static gboolean
 vte_terminal_accessible_remove_selection(AtkText *text,
 					 gint selection_number)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *widget;
 	VteTerminal *terminal;
 
@@ -1599,6 +1637,7 @@ static gboolean
 vte_terminal_accessible_set_selection(AtkText *text, gint selection_number,
 				      gint start_offset, gint end_offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *widget;
 	VteTerminal *terminal;
 
@@ -1625,6 +1664,7 @@ vte_terminal_accessible_set_selection(AtkText *text, gint selection_number,
 static gboolean
 vte_terminal_accessible_set_caret_offset(AtkText *text, gint offset)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(VTE_IS_TERMINAL_ACCESSIBLE(text));
 	vte_terminal_accessible_update_private_data_if_needed(ATK_OBJECT(text),
 							      NULL, NULL);
@@ -1635,6 +1675,7 @@ vte_terminal_accessible_set_caret_offset(AtkText *text, gint offset)
 static void
 vte_terminal_accessible_text_init(gpointer iface, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	AtkTextIface *text;
 	g_assert(G_TYPE_FROM_INTERFACE(iface) == ATK_TYPE_TEXT);
 	text = iface;
@@ -1662,12 +1703,14 @@ vte_terminal_accessible_text_init(gpointer iface, gpointer data)
 static AtkLayer
 vte_terminal_accessible_get_layer(AtkComponent *component)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return ATK_LAYER_WIDGET;
 }
 
 static gint
 vte_terminal_accessible_get_mdi_zorder(AtkComponent *component)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return G_MININT;
 }
 
@@ -1676,6 +1719,7 @@ vte_terminal_accessible_contains(AtkComponent *component,
 				 gint x, gint y,
 				 AtkCoordType coord_type)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gint ex, ey, ewidth, eheight;
 	atk_component_get_extents(component, &ex, &ey, &ewidth, &eheight,
 				  coord_type);
@@ -1691,6 +1735,7 @@ vte_terminal_accessible_get_extents(AtkComponent *component,
 				    gint *width, gint *height,
 				    AtkCoordType coord_type)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	atk_component_get_position(component, x, y, coord_type);
 	atk_component_get_size(component, width, height);
 }
@@ -1700,6 +1745,7 @@ vte_terminal_accessible_get_position(AtkComponent *component,
 				     gint *x, gint *y,
 				     AtkCoordType coord_type)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *widget;
 	*x = 0;
 	*y = 0;
@@ -1727,6 +1773,7 @@ static void
 vte_terminal_accessible_get_size(AtkComponent *component,
 				 gint *width, gint *height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *widget;
 	*width = 0;
 	*height = 0;
@@ -1746,6 +1793,7 @@ vte_terminal_accessible_set_extents(AtkComponent *component,
 				    gint width, gint height,
 				    AtkCoordType coord_type)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* FIXME?  We can change the size, but our position is controlled
 	 * by the parent container. */
 	return FALSE;
@@ -1756,6 +1804,7 @@ vte_terminal_accessible_set_position(AtkComponent *component,
 				     gint x, gint y,
 				     AtkCoordType coord_type)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* Controlled by the parent container, if there is one. */
 	return FALSE;
 }
@@ -1764,6 +1813,7 @@ static gboolean
 vte_terminal_accessible_set_size(AtkComponent *component,
 				 gint width, gint height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminal *terminal;
 	gint columns, rows, xpad, ypad;
 	GtkWidget *widget;
@@ -1788,6 +1838,7 @@ vte_terminal_accessible_ref_accessible_at_point(AtkComponent *component,
 						gint x, gint y,
 						AtkCoordType coord_type)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* There are no children. */
 	return NULL;
 }
@@ -1796,6 +1847,7 @@ static guint
 vte_terminal_accessible_add_focus_handler(AtkComponent *component,
 					  AtkFocusHandler handler)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint signal_id;
 	signal_id = g_signal_lookup("focus-event",
 				    VTE_TYPE_TERMINAL_ACCESSIBLE);
@@ -1816,6 +1868,7 @@ static void
 vte_terminal_accessible_remove_focus_handler(AtkComponent *component,
 					     guint handler_id)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(g_signal_handler_is_connected(component, handler_id));
 	g_signal_handler_disconnect(component, handler_id);
 }
@@ -1823,6 +1876,7 @@ vte_terminal_accessible_remove_focus_handler(AtkComponent *component,
 static void
 vte_terminal_accessible_component_init(gpointer iface, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	AtkComponentIface *component;
 	g_assert(G_TYPE_FROM_INTERFACE(iface) == ATK_TYPE_COMPONENT);
 	component = iface;
@@ -1850,6 +1904,7 @@ vte_terminal_accessible_component_init(gpointer iface, gpointer data)
 static gboolean
 vte_terminal_accessible_do_action (AtkAction *accessible, int i)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkWidget *widget;
 	gboolean retval = FALSE;
 
@@ -1874,12 +1929,14 @@ vte_terminal_accessible_do_action (AtkAction *accessible, int i)
 static int
 vte_terminal_accessible_get_n_actions (AtkAction *accessible)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return LAST_ACTION;
 }
 
 static const char *
 vte_terminal_accessible_action_get_description (AtkAction *accessible, int i)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalAccessiblePrivate *priv;
 
         g_return_val_if_fail (i < LAST_ACTION, NULL);
@@ -1901,6 +1958,7 @@ vte_terminal_accessible_action_get_description (AtkAction *accessible, int i)
 static const char *
 vte_terminal_accessible_action_get_name (AtkAction *accessible, int i)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         g_return_val_if_fail (i < LAST_ACTION, NULL);
 
         return vte_terminal_accessible_action_names[i];
@@ -1909,6 +1967,7 @@ vte_terminal_accessible_action_get_name (AtkAction *accessible, int i)
 static const char *
 vte_terminal_accessible_action_get_keybinding (AtkAction *accessible, int i)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         g_return_val_if_fail (i < LAST_ACTION, NULL);
 
         return NULL;
@@ -1919,6 +1978,7 @@ vte_terminal_accessible_action_set_description (AtkAction *accessible,
                                                 int i,
                                                 const char *description)
 {
+	printf ("Entering %s\n", __FUNCTION__);
         VteTerminalAccessiblePrivate *priv;
 
         g_return_val_if_fail (i < LAST_ACTION, FALSE);
@@ -1941,6 +2001,7 @@ vte_terminal_accessible_action_set_description (AtkAction *accessible,
 static void
 vte_terminal_accessible_action_init(gpointer iface, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	AtkActionIface *action;
 	g_return_if_fail(G_TYPE_FROM_INTERFACE(iface) == ATK_TYPE_ACTION);
 	action = iface;
@@ -1959,6 +2020,7 @@ vte_terminal_accessible_action_init(gpointer iface, gpointer data)
 static void
 vte_terminal_accessible_class_init(gpointer *klass)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GObjectClass *gobject_class;
 	AtkObjectClass *class = ATK_OBJECT_CLASS (klass);
 
@@ -1974,6 +2036,7 @@ vte_terminal_accessible_class_init(gpointer *klass)
 GType
 vte_terminal_accessible_get_type(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	static GType terminal_accessible_type = 0;
 
 	if (G_UNLIKELY (terminal_accessible_type == 0)) {
@@ -2069,6 +2132,7 @@ vte_terminal_accessible_get_type(void)
 static AtkObject *
 vte_terminal_accessible_factory_create_accessible(GObject *obj)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkAccessible *accessible;
 	VteTerminal *terminal;
 
@@ -2084,6 +2148,7 @@ vte_terminal_accessible_factory_create_accessible(GObject *obj)
 static void
 vte_terminal_accessible_factory_class_init(VteTerminalAccessibleFactoryClass *klass)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	AtkObjectFactoryClass *class = ATK_OBJECT_FACTORY_CLASS(klass);
 	/* Override the one method we care about. */
 	class->create_accessible = vte_terminal_accessible_factory_create_accessible;
@@ -2091,12 +2156,14 @@ vte_terminal_accessible_factory_class_init(VteTerminalAccessibleFactoryClass *kl
 static void
 vte_terminal_accessible_factory_init(VteTerminalAccessibleFactory *self)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* nothing to initialise */
 }
 
 AtkObjectFactory *
 vte_terminal_accessible_factory_new(void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_ALLY,
 			"Creating a new VteTerminalAccessibleFactory.\n");
 	return g_object_new(VTE_TYPE_TERMINAL_ACCESSIBLE_FACTORY, NULL);
diff --git a/src/vtebg.c b/src/vtebg.c
index 07e8821..a17915c 100644
--- a/src/vtebg.c
+++ b/src/vtebg.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2003 Red Hat, Inc.
  *
@@ -54,6 +55,7 @@ static void vte_bg_cache_prune_int(VteBg *bg, gboolean root);
 static const char *
 vte_bg_source_name(enum VteBgSourceType type)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	switch (type) {
 	case VTE_BG_SOURCE_NONE:
 		return "none";
@@ -87,6 +89,7 @@ struct VteBgNative {
 static struct VteBgNative *
 vte_bg_native_new(GdkWindow *window)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct VteBgNative *pvt;
 	pvt = g_slice_new(struct VteBgNative);
 	pvt->window = window;
@@ -100,6 +103,7 @@ vte_bg_native_new(GdkWindow *window)
 static void
 _vte_bg_display_sync(VteBg *bg)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gdk_display_sync(bg->native->display);
 }
 
@@ -108,6 +112,7 @@ _vte_property_get_pixmaps(GdkWindow *window, GdkAtom atom,
 			  GdkAtom *type, int *size,
 			  XID **pixmaps)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return gdk_property_get(window, atom, GDK_TARGET_PIXMAP,
 				0, INT_MAX - 3,
 				FALSE,
@@ -118,6 +123,7 @@ _vte_property_get_pixmaps(GdkWindow *window, GdkAtom atom,
 static GdkPixmap *
 vte_bg_root_pixmap(VteBg *bg)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkPixmap *pixmap;
 	GdkAtom prop_type;
 	int prop_size;
@@ -151,6 +157,7 @@ vte_bg_root_pixmap(VteBg *bg)
 static void
 vte_bg_set_root_pixmap(VteBg *bg, GdkPixmap *pixmap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (bg->root_pixmap != NULL) {
 		g_object_unref(bg->root_pixmap);
 	}
@@ -163,6 +170,7 @@ vte_bg_set_root_pixmap(VteBg *bg, GdkPixmap *pixmap)
 static GdkFilterReturn
 vte_bg_root_filter(GdkXEvent *native, GdkEvent *event, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	XEvent *xevent = (XEvent*) native;
 	VteBg *bg;
 	GdkPixmap *pixmap;
@@ -190,21 +198,25 @@ struct VteBgNative {
 static struct VteBgNative *
 vte_bg_native_new(GdkWindow *window)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return NULL;
 }
 static GdkFilterReturn
 vte_bg_root_filter(GdkXEvent *xevent, GdkEvent *event, gpointer data)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return GDK_FILTER_CONTINUE;
 }
 static void
 _vte_bg_display_sync(VteBg *bg)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 }
 
 static GdkPixmap *
 vte_bg_root_pixmap(VteBg *bg)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return NULL;
 }
 #endif
@@ -213,6 +225,7 @@ vte_bg_root_pixmap(VteBg *bg)
 static void
 vte_bg_finalize (GObject *obj)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteBg *bg;
 
 	bg = VTE_BG (obj);
@@ -228,6 +241,7 @@ vte_bg_finalize (GObject *obj)
 static void
 vte_bg_class_init(VteBgClass *klass)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GObjectClass *gobject_class = G_OBJECT_CLASS(klass);
 
 	bindtextdomain(GETTEXT_PACKAGE, LOCALEDIR);
@@ -251,6 +265,7 @@ vte_bg_class_init(VteBgClass *klass)
 static void
 vte_bg_init(VteBg *bg)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	bg->pvt = G_TYPE_INSTANCE_GET_PRIVATE (bg, VTE_TYPE_BG, struct VteBgPrivate);
 }
 
@@ -266,6 +281,7 @@ vte_bg_init(VteBg *bg)
 VteBg *
 vte_bg_get_for_screen(GdkScreen *screen)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkEventMask events;
 	GdkWindow   *window;
 	VteBg       *bg;
@@ -298,6 +314,7 @@ _vte_bg_generate_desat_tables(const GdkColor *color, double saturation,
 			      guchar green[256],
 			      guchar blue[256])
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i;
 	/* Zero saturation -> exactly match the tinting color. */
 	if (saturation == 0) {
@@ -332,6 +349,7 @@ _vte_bg_generate_desat_tables(const GdkColor *color, double saturation,
 static gboolean
 vte_bg_colors_equal(const GdkColor *a, const GdkColor *b)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return  (a->red >> 8) == (b->red >> 8) &&
 		(a->green >> 8) == (b->green >> 8) &&
 		(a->blue >> 8) == (b->blue >> 8);
@@ -340,6 +358,7 @@ vte_bg_colors_equal(const GdkColor *a, const GdkColor *b)
 static void
 vte_bg_cache_item_free(struct VteBgCacheItem *item)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* Clean up whatever is left in the structure. */
 	if (item->source_pixbuf != NULL) {
 		g_object_remove_weak_pointer(G_OBJECT(item->source_pixbuf),
@@ -361,6 +380,7 @@ vte_bg_cache_item_free(struct VteBgCacheItem *item)
 static void
 vte_bg_cache_prune_int(VteBg *bg, gboolean root)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GList *i, *next;
 	for (i = bg->pvt->cache; i != NULL; i = next) {
 		struct VteBgCacheItem *item = i->data;
@@ -380,6 +400,7 @@ vte_bg_cache_prune_int(VteBg *bg, gboolean root)
 static void
 vte_bg_cache_prune(VteBg *bg)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_bg_cache_prune_int(bg, FALSE);
 }
 
@@ -398,6 +419,7 @@ vte_bg_cache_prune(VteBg *bg)
 static GdkPixbuf *
 _vte_bg_resize_pixbuf(GdkPixbuf *pixbuf, gint min_width, gint min_height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkPixbuf *tmp;
 	gint src_width, src_height;
 	gint dst_width, dst_height;
@@ -437,6 +459,7 @@ _vte_bg_resize_pixbuf(GdkPixbuf *pixbuf, gint min_width, gint min_height)
 static void
 vte_bg_cache_add(VteBg *bg, struct VteBgCacheItem *item)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_bg_cache_prune(bg);
 	bg->pvt->cache = g_list_prepend(bg->pvt->cache, item);
 	if (item->source_pixbuf != NULL) {
@@ -458,6 +481,7 @@ static void
 vte_bg_desaturate_pixbuf(GdkPixbuf *pixbuf,
 			 const GdkColor *tint, double saturation)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guchar red[256], green[256], blue[256];
 	long stride, width, height, channels, x, y;
 	guchar *pixels;
@@ -503,6 +527,7 @@ vte_bg_cache_search(VteBg *bg,
 		    gboolean pixbuf,
 		    gboolean pixmap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GList *i;
 
 	g_assert((pixmap && !pixbuf) || (!pixmap && pixbuf));
@@ -551,6 +576,7 @@ vte_bg_get_pixmap(VteBg *bg,
 		  double saturation,
 		  GdkColormap *colormap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct VteBgCacheItem *item;
 	gpointer cached;
 	GdkColormap *rcolormap;
diff --git a/src/vteconv.c b/src/vteconv.c
index b51e42b..42424e7 100644
--- a/src/vteconv.c
+++ b/src/vteconv.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2003 Red Hat, Inc.
  *
@@ -45,6 +46,7 @@ struct _VteConv {
 static glong
 _vte_conv_utf8_strlen(const gchar *p, gssize max)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	const gchar *q = p + max;
 	glong length = -1;
 	do {
@@ -63,6 +65,7 @@ _vte_conv_utf8_utf8(GIConv converter,
 		    gchar **outbuf,
 		    gsize *outbytes_left)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean validated;
 	const gchar *endptr;
 	size_t bytes;
@@ -126,6 +129,7 @@ _vte_conv_utf8_utf8(GIConv converter,
 VteConv
 _vte_conv_open(const char *target, const char *source)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteConv ret;
 	GIConv conv;
 	gboolean in_unichar, out_unichar, utf8;
@@ -201,6 +205,7 @@ _vte_conv_open(const char *target, const char *source)
 gint
 _vte_conv_close(VteConv converter)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(converter != NULL);
 	g_assert(converter != VTE_INVALID_CONV);
 
@@ -225,6 +230,7 @@ _vte_conv(VteConv converter,
 	  const guchar **inbuf, gsize *inbytes_left,
 	  guchar **outbuf, gsize *outbytes_left)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	size_t ret, tmp;
 	const guchar *work_inbuf_start, *work_inbuf_working;
 	guchar *work_outbuf_start, *work_outbuf_working;
@@ -357,6 +363,7 @@ _vte_conv_cu(VteConv converter,
 	     const guchar **inbuf, gsize *inbytes_left,
 	     gunichar **outbuf, gsize *outbytes_left)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return _vte_conv(converter,
 			 inbuf, inbytes_left,
 			 (guchar**)outbuf, outbytes_left);
@@ -367,6 +374,7 @@ _vte_conv_uu(VteConv converter,
 	     const gunichar **inbuf, gsize *inbytes_left,
 	     gunichar **outbuf, gsize *outbytes_left)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return _vte_conv(converter,
 			 (const guchar**)inbuf, inbytes_left,
 			 (guchar**)outbuf, outbytes_left);
@@ -377,6 +385,7 @@ _vte_conv_uc(VteConv converter,
 	     const gunichar **inbuf, gsize *inbytes_left,
 	     guchar **outbuf, gsize *outbytes_left)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return _vte_conv(converter,
 			 (const guchar**)inbuf, inbytes_left,
 			 outbuf, outbytes_left);
@@ -386,6 +395,7 @@ _vte_conv_uc(VteConv converter,
 static void
 clear(gunichar wide[5], gchar narrow[5])
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	wide[0] = 'T';
 	wide[1] = 'E';
 	wide[2] = 'S';
@@ -397,6 +407,7 @@ clear(gunichar wide[5], gchar narrow[5])
 static int
 mixed_strcmp(gunichar *wide, gchar *narrow)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	while (*wide && *narrow) {
 		if (*wide != *narrow) {
 			return -1;
@@ -410,6 +421,7 @@ mixed_strcmp(gunichar *wide, gchar *narrow)
 int
 main(int argc, char **argv)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gunichar wide_test[5];
 	gchar narrow_test[5], buf[10];
 	VteConv conv;
diff --git a/src/vtedraw.c b/src/vtedraw.c
index 1eeeb9b..35094b5 100644
--- a/src/vtedraw.c
+++ b/src/vtedraw.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2003 Red Hat, Inc.
  *
@@ -39,6 +40,7 @@ static const struct _vte_draw_impl
 static gboolean
 _vte_draw_init_user (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	const gchar *env;
 	gchar **strv, **s;
 	guint i;
@@ -93,6 +95,7 @@ out:
 static gboolean
 _vte_draw_init_default (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint i;
 
 	for (i = 0; i < G_N_ELEMENTS (_vte_draw_impls); i++) {
@@ -110,6 +113,7 @@ _vte_draw_init_default (struct _vte_draw *draw)
 struct _vte_draw *
 _vte_draw_new (GtkWidget *widget)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_draw *draw;
 
 	/* Create the structure. */
@@ -140,6 +144,7 @@ _vte_draw_new (GtkWidget *widget)
 void
 _vte_draw_free (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print (VTE_DEBUG_DRAW, "draw_free\n");
 
 	if (draw->impl->destroy)
@@ -155,6 +160,7 @@ _vte_draw_free (struct _vte_draw *draw)
 GdkVisual *
 _vte_draw_get_visual (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkVisual *visual = NULL;
 
 	_vte_debug_print (VTE_DEBUG_DRAW, "draw_get_visual\n");
@@ -168,6 +174,7 @@ _vte_draw_get_visual (struct _vte_draw *draw)
 GdkColormap *
 _vte_draw_get_colormap (struct _vte_draw *draw, gboolean maybe_use_default)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkColormap *colormap;
 
 	_vte_debug_print (VTE_DEBUG_DRAW, "draw_get_colormap\n");
@@ -187,6 +194,7 @@ _vte_draw_get_colormap (struct _vte_draw *draw, gboolean maybe_use_default)
 void
 _vte_draw_start (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail (GTK_WIDGET_REALIZED (draw->widget));
 
 	_vte_debug_print (VTE_DEBUG_DRAW, "draw_start\n");
@@ -202,6 +210,7 @@ _vte_draw_start (struct _vte_draw *draw)
 void
 _vte_draw_end (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail (draw->started == TRUE);
 
 	if (draw->impl->end)
@@ -219,6 +228,7 @@ _vte_draw_set_background_solid(struct _vte_draw *draw,
 			       GdkColor *color,
 			       guint16 opacity)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	draw->requires_clear = draw->impl->always_requires_clear || opacity != 0xFFFF;
 
 	if (draw->impl->set_background_solid)
@@ -233,6 +243,7 @@ _vte_draw_set_background_image (struct _vte_draw *draw,
 			        const GdkColor *color,
 			        double saturation)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (type != VTE_BG_SOURCE_NONE)
 		draw->requires_clear = TRUE;
 
@@ -245,6 +256,7 @@ void
 _vte_draw_set_background_scroll (struct _vte_draw *draw,
 				 gint x, gint y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print (VTE_DEBUG_DRAW,
 			"draw_set_scroll (%d, %d)\n",
 			x, y);
@@ -256,12 +268,14 @@ _vte_draw_set_background_scroll (struct _vte_draw *draw,
 gboolean
 _vte_draw_requires_clear (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return draw->requires_clear;
 }
 
 gboolean
 _vte_draw_clip (struct _vte_draw *draw, GdkRegion *region)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean clip = FALSE;
 	_vte_debug_print (VTE_DEBUG_DRAW, "draw_clip\n");
 
@@ -276,6 +290,7 @@ _vte_draw_clip (struct _vte_draw *draw, GdkRegion *region)
 void
 _vte_draw_clear (struct _vte_draw *draw, gint x, gint y, gint width, gint height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail (draw->impl->clear != NULL);
 
 	_vte_debug_print (VTE_DEBUG_DRAW, "draw_clear (%d, %d, %d, %d)\n",
@@ -289,6 +304,7 @@ _vte_draw_set_text_font (struct _vte_draw *draw,
 			const PangoFontDescription *fontdesc,
 			VteTerminalAntiAlias anti_alias)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print (VTE_DEBUG_DRAW, "draw_set_text_font (aa=%d)\n",
 			  anti_alias);
 
@@ -300,6 +316,7 @@ void
 _vte_draw_get_text_metrics(struct _vte_draw *draw,
 			   gint *width, gint *height, gint *ascent)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gint swidth = 0, sheight = 0, sascent = 0;
 
 	g_return_if_fail (draw->impl->get_text_metrics != NULL);
@@ -315,6 +332,7 @@ int
 _vte_draw_get_char_width (struct _vte_draw *draw, vteunistr c, int columns,
 			  gboolean bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int width = 0;
 
 	if (draw->impl->get_char_width)
@@ -331,6 +349,7 @@ _vte_draw_text (struct _vte_draw *draw,
 	       struct _vte_draw_text_request *requests, gsize n_requests,
 	       GdkColor *color, guchar alpha, gboolean bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail (draw->started == TRUE);
 	g_return_if_fail (draw->impl->draw_text != NULL);
 
@@ -371,6 +390,7 @@ _vte_draw_char (struct _vte_draw *draw,
 	       struct _vte_draw_text_request *request,
 	       GdkColor *color, guchar alpha, gboolean bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean has_char;
 
 	_vte_debug_print (VTE_DEBUG_DRAW,
@@ -388,6 +408,7 @@ _vte_draw_char (struct _vte_draw *draw,
 gboolean
 _vte_draw_has_char (struct _vte_draw *draw, vteunistr c, gboolean bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean has_char = TRUE;
 
 	_vte_debug_print (VTE_DEBUG_DRAW, "draw_has_char ('0x%04X', %s)\n", c,
@@ -404,6 +425,7 @@ _vte_draw_fill_rectangle (struct _vte_draw *draw,
 			 gint x, gint y, gint width, gint height,
 			 GdkColor *color, guchar alpha)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail (draw->started == TRUE);
 	g_return_if_fail (draw->impl->fill_rectangle != NULL);
 
@@ -421,6 +443,7 @@ _vte_draw_draw_rectangle (struct _vte_draw *draw,
 			 gint x, gint y, gint width, gint height,
 			 GdkColor *color, guchar alpha)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail (draw->started == TRUE);
 
 	_vte_debug_print (VTE_DEBUG_DRAW,
diff --git a/src/vtepangocairo.c b/src/vtepangocairo.c
index 952a6d4..e95dbfc 100644
--- a/src/vtepangocairo.c
+++ b/src/vtepangocairo.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2003,2008 Red Hat, Inc.
  *
@@ -174,12 +175,14 @@ struct unistr_info {
 static struct unistr_info *
 unistr_info_create (void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return g_slice_new0 (struct unistr_info);
 }
 
 static void
 unistr_info_finish (struct unistr_info *uinfo)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	union unistr_font_info *ufi = &uinfo->ufi;
 
 	switch (uinfo->coverage) {
@@ -211,6 +214,7 @@ unistr_info_finish (struct unistr_info *uinfo)
 static void
 unistr_info_destroy (struct unistr_info *uinfo)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unistr_info_finish (uinfo);
 	g_slice_free (struct unistr_info, uinfo);
 }
@@ -244,6 +248,7 @@ static struct unistr_info *
 font_info_find_unistr_info (struct font_info    *info,
 			    vteunistr            c)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct unistr_info *uinfo;
 
 	if (G_LIKELY (c < G_N_ELEMENTS (info->ascii_unistr_info)))
@@ -265,6 +270,7 @@ font_info_find_unistr_info (struct font_info    *info,
 static void
 font_info_cache_ascii (struct font_info *info)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	PangoLayoutLine *line;
 	PangoGlyphItemIter iter;
 	PangoGlyphItem *glyph_item;
@@ -367,6 +373,7 @@ font_info_cache_ascii (struct font_info *info)
 static void
 font_info_measure_font (struct font_info *info)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	PangoRectangle logical;
 
 	/* Estimate for ASCII characters. */
@@ -399,6 +406,7 @@ font_info_measure_font (struct font_info *info)
 static struct font_info *
 font_info_allocate (PangoContext *context)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct font_info *info;
 
 	info = g_slice_new0 (struct font_info);
@@ -418,6 +426,7 @@ font_info_allocate (PangoContext *context)
 static void
 font_info_free (struct font_info *info)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vteunistr i;
 
 #ifdef VTE_DEBUG
@@ -451,6 +460,7 @@ static gboolean
 cleanup_delayed_font_info_destroys_predicate (PangoContext *context,
 					      struct font_info *info)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (info->destroy_timeout) {
 		g_source_remove (info->destroy_timeout);
 		info->destroy_timeout = 0;
@@ -465,6 +475,7 @@ cleanup_delayed_font_info_destroys_predicate (PangoContext *context,
 static gboolean
 cleanup_delayed_font_info_destroys (void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_hash_table_foreach_remove (font_info_for_context,
 				     (GHRFunc) cleanup_delayed_font_info_destroys_predicate,
 				     NULL);
@@ -476,6 +487,7 @@ cleanup_delayed_font_info_destroys (void)
 static void
 ensure_quit_handler (void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (G_UNLIKELY (quit_id == 0))
 		quit_id = gtk_quit_add (1,
 					(GtkFunction) cleanup_delayed_font_info_destroys,
@@ -485,6 +497,7 @@ ensure_quit_handler (void)
 static struct font_info *
 font_info_register (struct font_info *info)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_hash_table_insert (font_info_for_context,
 			     pango_layout_get_context (info->layout),
 			     info);
@@ -495,6 +508,7 @@ font_info_register (struct font_info *info)
 static void
 font_info_unregister (struct font_info *info)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_hash_table_remove (font_info_for_context,
 			     pango_layout_get_context (info->layout));
 }
@@ -503,6 +517,7 @@ font_info_unregister (struct font_info *info)
 static struct font_info *
 font_info_reference (struct font_info *info)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (!info)
 		return info;
 
@@ -521,6 +536,7 @@ font_info_reference (struct font_info *info)
 static gboolean
 font_info_destroy_delayed (struct font_info *info)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	info->destroy_timeout = 0;
 
 	font_info_unregister (info);
@@ -532,6 +548,7 @@ font_info_destroy_delayed (struct font_info *info)
 static void
 font_info_destroy (struct font_info *info)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (!info)
 		return;
 
@@ -551,6 +568,7 @@ font_info_destroy (struct font_info *info)
 static GQuark
 fontconfig_timestamp_quark (void)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	static GQuark quark;
 
 	if (G_UNLIKELY (!quark))
@@ -563,6 +581,7 @@ static void
 vte_pango_cairo_set_fontconfig_timestamp (PangoContext *context,
 					  guint         fontconfig_timestamp)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_object_set_qdata ((GObject *) context,
 			    fontconfig_timestamp_quark (),
 			    GUINT_TO_POINTER (fontconfig_timestamp));
@@ -571,6 +590,7 @@ vte_pango_cairo_set_fontconfig_timestamp (PangoContext *context,
 static guint
 vte_pango_cairo_get_fontconfig_timestamp (PangoContext *context)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return GPOINTER_TO_UINT (g_object_get_qdata ((GObject *) context,
 						     fontconfig_timestamp_quark ()));
 }
@@ -578,6 +598,7 @@ vte_pango_cairo_get_fontconfig_timestamp (PangoContext *context)
 static guint
 context_hash (PangoContext *context)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return pango_units_from_double (pango_cairo_context_get_resolution (context))
 	     ^ pango_font_description_hash (pango_context_get_font_description (context))
 	     ^ cairo_font_options_hash (pango_cairo_context_get_font_options (context))
@@ -589,6 +610,7 @@ static gboolean
 context_equal (PangoContext *a,
 	       PangoContext *b)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return pango_cairo_context_get_resolution (a) == pango_cairo_context_get_resolution (b)
 	    && pango_font_description_equal (pango_context_get_font_description (a), pango_context_get_font_description (b))
 	    && cairo_font_options_equal (pango_cairo_context_get_font_options (a), pango_cairo_context_get_font_options (b))
@@ -599,6 +621,7 @@ context_equal (PangoContext *a,
 static struct font_info *
 font_info_find_for_context (PangoContext *context)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct font_info *info;
 
 	if (G_UNLIKELY (font_info_for_context == NULL))
@@ -629,6 +652,7 @@ font_info_create_for_context (PangoContext               *context,
 			      PangoLanguage              *language,
 			      guint                       fontconfig_timestamp)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (!PANGO_IS_CAIRO_FONT_MAP (pango_context_get_font_map (context))) {
 		/* Ouch, Gtk+ switched over to some drawing system?
 		 * Lets just create one from the default font map.
@@ -687,6 +711,7 @@ font_info_create_for_screen (GdkScreen                  *screen,
 			     VteTerminalAntiAlias        antialias,
 			     PangoLanguage              *language)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GtkSettings *settings = gtk_settings_get_for_screen (screen);
 	int fontconfig_timestamp;
 	g_object_get (settings, "gtk-fontconfig-timestamp", &fontconfig_timestamp, NULL);
@@ -699,6 +724,7 @@ font_info_create_for_widget (GtkWidget                  *widget,
 			     const PangoFontDescription *desc,
 			     VteTerminalAntiAlias        antialias)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkScreen *screen = gtk_widget_get_screen (widget);
 	PangoLanguage *language = pango_context_get_language (gtk_widget_get_pango_context (widget));
 
@@ -709,6 +735,7 @@ static struct unistr_info *
 font_info_get_unistr_info (struct font_info *info,
 			   vteunistr c)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct unistr_info *uinfo;
 	union unistr_font_info *ufi;
 	PangoRectangle logical;
@@ -795,6 +822,7 @@ struct _vte_pangocairo_data {
 static void
 _vte_pangocairo_create (struct _vte_draw *draw, GtkWidget *widget)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data;
 
 	data = g_slice_new0 (struct _vte_pangocairo_data);
@@ -804,6 +832,7 @@ _vte_pangocairo_create (struct _vte_draw *draw, GtkWidget *widget)
 static void
 _vte_pangocairo_destroy (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 
 	if (data->bg_pattern != NULL) {
@@ -823,6 +852,7 @@ _vte_pangocairo_destroy (struct _vte_draw *draw)
 static void
 _vte_pangocairo_start (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 
 	data->cr = gdk_cairo_create (draw->widget->window);
@@ -831,6 +861,7 @@ _vte_pangocairo_start (struct _vte_draw *draw)
 static void
 _vte_pangocairo_end (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 
 	if (data->cr != NULL) {
@@ -844,6 +875,7 @@ _vte_pangocairo_set_background_solid(struct _vte_draw *draw,
 				     GdkColor *color,
 				     guint16 opacity)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 
 	if (data->bg_pattern)
@@ -863,6 +895,7 @@ _vte_pangocairo_set_background_image (struct _vte_draw *draw,
 				      const GdkColor *color,
 				      double saturation)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 	GdkPixmap *pixmap;
 	cairo_surface_t *surface;
@@ -902,6 +935,7 @@ static void
 _vte_pangocairo_set_background_scroll (struct _vte_draw *draw,
 				       gint x, gint y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 	cairo_matrix_t matrix;
 
@@ -915,6 +949,7 @@ static void
 _vte_pangocairo_clear (struct _vte_draw *draw,
 		       gint x, gint y, gint width, gint height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 
 	g_return_if_fail (data->bg_pattern != NULL);
@@ -929,6 +964,7 @@ static void
 _vte_pangocairo_clip (struct _vte_draw *draw,
 		      GdkRegion *region)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 
 	gdk_cairo_region(data->cr, region);
@@ -940,6 +976,7 @@ _vte_pangocairo_set_text_font (struct _vte_draw *draw,
 			       const PangoFontDescription *fontdesc,
 			       VteTerminalAntiAlias antialias)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 	PangoFontDescription *bolddesc = NULL;
 
@@ -968,6 +1005,7 @@ static void
 _vte_pangocairo_get_text_metrics(struct _vte_draw *draw,
 				 gint *width, gint *height, gint *ascent)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 	
 	g_return_if_fail (data->font != NULL);
@@ -982,6 +1020,7 @@ static int
 _vte_pangocairo_get_char_width (struct _vte_draw *draw, vteunistr c, int columns,
 				gboolean bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 	struct unistr_info *uinfo;
 
@@ -994,6 +1033,7 @@ _vte_pangocairo_get_char_width (struct _vte_draw *draw, vteunistr c, int columns
 static gboolean
 _vte_pangocairo_has_bold (struct _vte_draw *draw)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 
 	return (data->font != data->font_bold);
@@ -1004,6 +1044,7 @@ set_source_color_alpha (cairo_t        *cr,
 			const GdkColor *color,
 			guchar alpha)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	cairo_set_source_rgba (cr,
 			      color->red / 65535.,
 			      color->green / 65535.,
@@ -1016,6 +1057,7 @@ _vte_pangocairo_draw_text (struct _vte_draw *draw,
 			   struct _vte_draw_text_request *requests, gsize n_requests,
 			   GdkColor *color, guchar alpha, gboolean bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 	gsize i;
 	cairo_scaled_font_t *last_scaled_font = NULL;
@@ -1082,6 +1124,7 @@ static gboolean
 _vte_pangocairo_draw_has_char (struct _vte_draw *draw, vteunistr c,
 			       gboolean bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 	struct unistr_info *uinfo;
 
@@ -1096,6 +1139,7 @@ _vte_pangocairo_draw_rectangle (struct _vte_draw *draw,
 				gint x, gint y, gint width, gint height,
 				GdkColor *color, guchar alpha)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 
 	cairo_set_operator (data->cr, CAIRO_OPERATOR_OVER);
@@ -1110,6 +1154,7 @@ _vte_pangocairo_fill_rectangle (struct _vte_draw *draw,
 				gint x, gint y, gint width, gint height,
 				GdkColor *color, guchar alpha)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_pangocairo_data *data = draw->impl_data;
 
 	cairo_set_operator (data->cr, CAIRO_OPERATOR_OVER);
diff --git a/src/vteregex.c b/src/vteregex.c
index c8d1fe7..62291e6 100644
--- a/src/vteregex.c
+++ b/src/vteregex.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2003 Red Hat, Inc.
  *
@@ -32,6 +33,7 @@
 static gint
 compare_matches(gconstpointer a, gconstpointer b)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	const struct _vte_regex_match *A, *B;
 	A = a;
 	B = b;
@@ -47,6 +49,7 @@ compare_matches(gconstpointer a, gconstpointer b)
 static void
 _vte_regex_sort_matches(struct _vte_regex_match *matches, gsize n_matches)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GArray *array;
 	if (n_matches <= 1) {
 		return;
@@ -69,6 +72,7 @@ struct _vte_regex {
 struct _vte_regex *
 _vte_regex_compile(const char *pattern)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct _vte_regex *ret;
 	int i;
 
@@ -84,6 +88,7 @@ _vte_regex_compile(const char *pattern)
 void
 _vte_regex_free(struct _vte_regex *regex)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	regfree(&regex->posix_regex);
 	g_slice_free(struct _vte_regex, regex);
 }
@@ -92,6 +97,7 @@ int
 _vte_regex_exec(struct _vte_regex *regex, const char *string,
 		gsize nmatch, struct _vte_regex_match *matches)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	regmatch_t *posix_matches;
 	guint i, ret;
 
diff --git a/src/vteseq.c b/src/vteseq.c
index 072b19a..612684b 100644
--- a/src/vteseq.c
+++ b/src/vteseq.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2001-2004 Red Hat, Inc.
  *
@@ -41,6 +42,7 @@
 static void
 display_control_sequence(const char *name, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 #ifdef VTE_DEBUG
 	guint i;
 	long l;
@@ -79,6 +81,7 @@ display_control_sequence(const char *name, GValueArray *params)
 static struct vte_charcell *
 vte_terminal_find_charcell(VteTerminal *terminal, glong col, glong row)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata;
 	struct vte_charcell *ret = NULL;
 	VteScreen *screen;
@@ -101,6 +104,7 @@ vte_terminal_find_charcell(VteTerminal *terminal, glong col, glong row)
 static void
 vte_g_array_fill(GArray *array, gpointer item, guint final_size)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_assert(array != NULL);
 	if (array->len >= final_size) {
 		return;
@@ -117,6 +121,7 @@ vte_g_array_fill(GArray *array, gpointer item, guint final_size)
 static void
 vte_insert_line_internal(VteTerminal *terminal, glong position)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row, *old_row;
 	old_row = terminal->pvt->free_row;
 	/* Pad out the line data to the insertion point. */
@@ -147,6 +152,7 @@ vte_insert_line_internal(VteTerminal *terminal, glong position)
 static void
 vte_remove_line_internal(VteTerminal *terminal, glong position)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (_vte_ring_next(terminal->pvt->screen->row_data) > position) {
 		if (terminal->pvt->free_row)
 			_vte_free_row_data (terminal->pvt->free_row);
@@ -162,6 +168,7 @@ vte_remove_line_internal(VteTerminal *terminal, glong position)
 static gssize
 vte_unichar_strlen(gunichar *c)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int i;
 	for (i = 0; c[i] != 0; i++) ;
 	return i;
@@ -171,6 +178,7 @@ vte_unichar_strlen(gunichar *c)
 static gchar *
 vte_ucs4_to_utf8 (VteTerminal *terminal, const guchar *in)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gchar *out = NULL;
 	guchar *buf = NULL, *bufptr = NULL;
 	gsize inlen, outlen;
@@ -204,6 +212,7 @@ vte_ucs4_to_utf8 (VteTerminal *terminal, const guchar *in)
 static gboolean
 vte_parse_color (const char *spec, GdkColor *color)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gchar *spec_copy = (gchar *) spec;
 	gboolean retval = FALSE;
 
@@ -242,6 +251,7 @@ vte_parse_color (const char *spec, GdkColor *color)
 static void
 vte_terminal_emit_deiconify_window(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `deiconify-window'.\n");
 	g_signal_emit_by_name(terminal, "deiconify-window");
@@ -251,6 +261,7 @@ vte_terminal_emit_deiconify_window(VteTerminal *terminal)
 static void
 vte_terminal_emit_iconify_window(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `iconify-window'.\n");
 	g_signal_emit_by_name(terminal, "iconify-window");
@@ -260,6 +271,7 @@ vte_terminal_emit_iconify_window(VteTerminal *terminal)
 static void
 vte_terminal_emit_raise_window(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `raise-window'.\n");
 	g_signal_emit_by_name(terminal, "raise-window");
@@ -269,6 +281,7 @@ vte_terminal_emit_raise_window(VteTerminal *terminal)
 static void
 vte_terminal_emit_lower_window(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `lower-window'.\n");
 	g_signal_emit_by_name(terminal, "lower-window");
@@ -278,6 +291,7 @@ vte_terminal_emit_lower_window(VteTerminal *terminal)
 static void
 vte_terminal_emit_maximize_window(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `maximize-window'.\n");
 	g_signal_emit_by_name(terminal, "maximize-window");
@@ -287,6 +301,7 @@ vte_terminal_emit_maximize_window(VteTerminal *terminal)
 static void
 vte_terminal_emit_refresh_window(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `refresh-window'.\n");
 	g_signal_emit_by_name(terminal, "refresh-window");
@@ -296,6 +311,7 @@ vte_terminal_emit_refresh_window(VteTerminal *terminal)
 static void
 vte_terminal_emit_restore_window(VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `restore-window'.\n");
 	g_signal_emit_by_name(terminal, "restore-window");
@@ -305,6 +321,7 @@ vte_terminal_emit_restore_window(VteTerminal *terminal)
 static void
 vte_terminal_emit_move_window(VteTerminal *terminal, guint x, guint y)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `move-window'.\n");
 	g_signal_emit_by_name(terminal, "move-window", x, y);
@@ -315,6 +332,7 @@ static void
 vte_terminal_emit_resize_window(VteTerminal *terminal,
 				guint width, guint height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_SIGNALS,
 			"Emitting `resize-window'.\n");
 	g_signal_emit_by_name(terminal, "resize-window", width, height);
@@ -326,6 +344,7 @@ vte_terminal_emit_resize_window(VteTerminal *terminal,
 static void
 _vte_terminal_home_cursor (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	screen = terminal->pvt->screen;
 	screen->cursor_current.row = screen->insert_delta;
@@ -336,6 +355,7 @@ _vte_terminal_home_cursor (VteTerminal *terminal)
 static void
 _vte_terminal_clear_screen (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata, *old_row;
 	long i, initial, row;
 	VteScreen *screen;
@@ -372,6 +392,7 @@ _vte_terminal_clear_screen (VteTerminal *terminal)
 static void
 _vte_terminal_clear_current_line (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata;
 	VteScreen *screen;
 
@@ -408,6 +429,7 @@ _vte_terminal_clear_current_line (VteTerminal *terminal)
 static void
 _vte_terminal_clear_above_current (VteTerminal *terminal)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata;
 	long i;
 	VteScreen *screen;
@@ -444,6 +466,7 @@ _vte_terminal_clear_above_current (VteTerminal *terminal)
 static void
 _vte_terminal_scroll_text (VteTerminal *terminal, int scroll_amount)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *row, *old_row;
 	long start, end, i;
 	VteScreen *screen;
@@ -497,6 +520,7 @@ vte_terminal_termcap_string_same_as_for (VteTerminal *terminal,
 					 const char  *cap_str,
 					 const char  *cap_other)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	char *other_str;
 	gboolean ret;
 
@@ -518,6 +542,7 @@ vte_sequence_handler_set_title_internal(VteTerminal *terminal,
 					gboolean icon_title,
 					gboolean window_title)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	char *title = NULL;
 
@@ -575,6 +600,7 @@ static void
 vte_sequence_handler_set_mode_internal(VteTerminal *terminal,
 				       long setting, gboolean value)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	switch (setting) {
 	case 2:		/* keyboard action mode (?) */
 		break;
@@ -615,6 +641,7 @@ vte_sequence_handler_offset(VteTerminal *terminal,
 			    int increment,
 			    VteTerminalSequenceHandler handler)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint i;
 	long val;
 	GValue *value;
@@ -636,6 +663,7 @@ vte_sequence_handler_multiple(VteTerminal *terminal,
 			      GValueArray *params,
 			      VteTerminalSequenceHandler handler)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long val = 1;
 	int i;
 	GValue *value;
@@ -660,6 +688,7 @@ vte_sequence_handler_decset_internal(VteTerminal *terminal,
 				     gboolean save,
 				     gboolean set)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gboolean recognized = FALSE;
 	gpointer p;
 	guint i;
@@ -989,6 +1018,7 @@ vte_sequence_handler_decset_internal(VteTerminal *terminal,
 static void
 vte_sequence_handler_ae (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->alternate_charset = FALSE;
 }
 
@@ -996,6 +1026,7 @@ vte_sequence_handler_ae (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_al (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	VteRowData *rowdata;
 	long start, end, param, i;
@@ -1047,6 +1078,7 @@ vte_sequence_handler_al (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_AL (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_al (terminal, params);
 }
 
@@ -1054,6 +1086,7 @@ vte_sequence_handler_AL (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_as (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->alternate_charset = TRUE;
 }
 
@@ -1061,6 +1094,7 @@ vte_sequence_handler_as (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_bl (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_terminal_beep (terminal);
 	g_signal_emit_by_name(terminal, "beep");
 }
@@ -1069,6 +1103,7 @@ vte_sequence_handler_bl (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_bt (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long newcol;
 
 	/* Calculate which column is the previous tab stop. */
@@ -1100,6 +1135,7 @@ vte_sequence_handler_bt (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_cb (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata;
 	long i;
 	VteScreen *screen;
@@ -1137,6 +1173,7 @@ vte_sequence_handler_cb (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_cd (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata;
 	glong i;
 	VteScreen *screen;
@@ -1205,6 +1242,7 @@ vte_sequence_handler_cd (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ce (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata;
 	VteScreen *screen;
 
@@ -1238,6 +1276,7 @@ vte_sequence_handler_ce (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ch (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	GValue *value;
 	long val;
@@ -1261,6 +1300,7 @@ vte_sequence_handler_ch (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_cl (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_terminal_clear_screen (terminal);
 	_vte_terminal_home_cursor (terminal);
 
@@ -1272,6 +1312,7 @@ vte_sequence_handler_cl (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_cm (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *row, *col;
 	long rowval, colval, origin;
 	VteScreen *screen;
@@ -1310,6 +1351,7 @@ vte_sequence_handler_cm (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_cr (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->cursor_current.col = 0;
 }
 
@@ -1317,6 +1359,7 @@ vte_sequence_handler_cr (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_cs (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long start=-1, end=-1, rows;
 	GValue *value;
 	VteScreen *screen;
@@ -1362,6 +1405,7 @@ vte_sequence_handler_cs (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_cS (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long start=0, end=terminal->row_count-1, rows;
 	GValue *value;
 	VteScreen *screen;
@@ -1402,6 +1446,7 @@ vte_sequence_handler_cS (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ct (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->tabstops != NULL) {
 		g_hash_table_destroy(terminal->pvt->tabstops);
 		terminal->pvt->tabstops = NULL;
@@ -1412,6 +1457,7 @@ vte_sequence_handler_ct (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_cursor_lower_left (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	long row;
 	screen = terminal->pvt->screen;
@@ -1424,6 +1470,7 @@ vte_sequence_handler_cursor_lower_left (VteTerminal *terminal, GValueArray *para
 static void
 vte_sequence_handler_cursor_next_line (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->cursor_current.col = 0;
 	vte_sequence_handler_DO (terminal, params);
 }
@@ -1432,6 +1479,7 @@ vte_sequence_handler_cursor_next_line (VteTerminal *terminal, GValueArray *param
 static void
 vte_sequence_handler_cursor_preceding_line (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->cursor_current.col = 0;
 	vte_sequence_handler_UP (terminal, params);
 }
@@ -1440,6 +1488,7 @@ vte_sequence_handler_cursor_preceding_line (VteTerminal *terminal, GValueArray *
 static void
 vte_sequence_handler_cv (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	GValue *value;
 	long val, origin;
@@ -1466,6 +1515,7 @@ vte_sequence_handler_cv (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_dc (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	VteRowData *rowdata;
 	long col;
@@ -1505,6 +1555,7 @@ vte_sequence_handler_dc (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_DC (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_multiple(terminal, params, vte_sequence_handler_dc);
 }
 
@@ -1512,6 +1563,7 @@ vte_sequence_handler_DC (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_dl (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	long start, end, param, i;
 	GValue *value;
@@ -1555,6 +1607,7 @@ vte_sequence_handler_dl (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_DL (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_dl (terminal, params);
 }
 
@@ -1562,6 +1615,7 @@ vte_sequence_handler_DL (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_do (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long start, end;
 	VteScreen *screen;
 
@@ -1583,6 +1637,7 @@ vte_sequence_handler_do (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_DO (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_multiple(terminal, params, vte_sequence_handler_do);
 }
 
@@ -1590,6 +1645,7 @@ vte_sequence_handler_DO (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_eA (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_ae (terminal, params);
 }
 
@@ -1598,6 +1654,7 @@ vte_sequence_handler_eA (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ec (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	VteRowData *rowdata;
 	GValue *value;
@@ -1653,6 +1710,7 @@ vte_sequence_handler_ec (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ei (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->insert_mode = FALSE;
 }
 
@@ -1660,6 +1718,7 @@ vte_sequence_handler_ei (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_form_feed (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_index (terminal, params);
 }
 
@@ -1667,6 +1726,7 @@ vte_sequence_handler_form_feed (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_fs (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->status_line = FALSE;
 }
 
@@ -1674,6 +1734,7 @@ vte_sequence_handler_fs (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ho (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_terminal_home_cursor (terminal);
 }
 
@@ -1681,6 +1742,7 @@ vte_sequence_handler_ho (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_horizontal_and_vertical_position (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_offset(terminal, params, -1, vte_sequence_handler_cm);
 }
 
@@ -1688,6 +1750,7 @@ vte_sequence_handler_horizontal_and_vertical_position (VteTerminal *terminal, GV
 static void
 vte_sequence_handler_ic (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_cursor_position save;
 	VteScreen *screen;
 
@@ -1704,6 +1767,7 @@ vte_sequence_handler_ic (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_IC (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_multiple(terminal, params, vte_sequence_handler_ic);
 }
 
@@ -1711,6 +1775,7 @@ vte_sequence_handler_IC (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_im (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->insert_mode = TRUE;
 }
 
@@ -1718,6 +1783,7 @@ vte_sequence_handler_im (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_index (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_sf (terminal, params);
 }
 
@@ -1726,6 +1792,7 @@ vte_sequence_handler_index (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_kb (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* Move the cursor left. */
 	vte_sequence_handler_le (terminal, params);
 }
@@ -1734,6 +1801,7 @@ vte_sequence_handler_kb (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ke (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->keypad_mode = VTE_KEYMODE_NORMAL;
 }
 
@@ -1741,6 +1809,7 @@ vte_sequence_handler_ke (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ks (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->keypad_mode = VTE_KEYMODE_APPLICATION;
 }
 
@@ -1748,6 +1817,7 @@ vte_sequence_handler_ks (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_le (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 
 	screen = terminal->pvt->screen;
@@ -1776,6 +1846,7 @@ vte_sequence_handler_le (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_LE (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_multiple(terminal, params, vte_sequence_handler_le);
 }
 
@@ -1783,6 +1854,7 @@ vte_sequence_handler_LE (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ll (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	screen = terminal->pvt->screen;
 	screen->cursor_current.row = MAX(screen->insert_delta,
@@ -1795,6 +1867,7 @@ vte_sequence_handler_ll (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_mb (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->defaults.attr.blink = 1;
 }
 
@@ -1802,6 +1875,7 @@ vte_sequence_handler_mb (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_md (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->defaults.attr.bold = 1;
 	terminal->pvt->screen->defaults.attr.half = 0;
 }
@@ -1810,6 +1884,7 @@ vte_sequence_handler_md (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_me (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_terminal_set_default_attributes(terminal);
 }
 
@@ -1817,6 +1892,7 @@ vte_sequence_handler_me (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_mh (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->defaults.attr.half = 1;
 	terminal->pvt->screen->defaults.attr.bold = 0;
 }
@@ -1825,6 +1901,7 @@ vte_sequence_handler_mh (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_mk (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->defaults.attr.invisible = 1;
 }
 
@@ -1832,6 +1909,7 @@ vte_sequence_handler_mk (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_mp (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* unused; bug 499893
 	terminal->pvt->screen->defaults.attr.protect = 1;
 	 */
@@ -1841,6 +1919,7 @@ vte_sequence_handler_mp (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_mr (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->defaults.attr.reverse = 1;
 }
 
@@ -1848,6 +1927,7 @@ vte_sequence_handler_mr (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_nd (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	screen = terminal->pvt->screen;
 	if ((screen->cursor_current.col + 1) < terminal->column_count) {
@@ -1860,6 +1940,7 @@ vte_sequence_handler_nd (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_next_line (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->cursor_current.col = 0;
 	vte_sequence_handler_DO (terminal, params);
 }
@@ -1868,12 +1949,14 @@ vte_sequence_handler_next_line (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_noop (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 }
 
 /* Carriage return command(?). */
 static void
 vte_sequence_handler_nw (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_cr (terminal, params);
 }
 
@@ -1881,6 +1964,7 @@ vte_sequence_handler_nw (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_rc (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	screen = terminal->pvt->screen;
 	screen->cursor_current.col = screen->cursor_saved.col;
@@ -1895,6 +1979,7 @@ vte_sequence_handler_rc (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_reverse_index (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_sr (terminal, params);
 }
 
@@ -1902,6 +1987,7 @@ vte_sequence_handler_reverse_index (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_RI (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_multiple(terminal, params, vte_sequence_handler_nd);
 }
 
@@ -1909,6 +1995,7 @@ vte_sequence_handler_RI (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_sc (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	screen = terminal->pvt->screen;
 	screen->cursor_saved.col = screen->cursor_current.col;
@@ -1921,6 +2008,7 @@ vte_sequence_handler_sc (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_scroll_down (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long val = 1;
 	GValue *value;
 
@@ -1939,6 +2027,7 @@ vte_sequence_handler_scroll_down (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_change_color (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gchar **pairs, *str = NULL;
 	GValue *value;
 	GdkColor color;
@@ -1995,6 +2084,7 @@ vte_sequence_handler_change_color (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_scroll_up (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long val = 1;
 	GValue *value;
 
@@ -2013,6 +2103,7 @@ vte_sequence_handler_scroll_up (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_se (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	char *standout;
 
 	/* Standout may be mapped to another attribute, so attempt to do
@@ -2045,6 +2136,7 @@ vte_sequence_handler_se (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_sf (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_terminal_cursor_down (terminal);
 }
 
@@ -2052,6 +2144,7 @@ vte_sequence_handler_sf (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_SF (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* XXX implement this directly in _vte_terminal_cursor_down */
 	vte_sequence_handler_multiple(terminal, params, vte_sequence_handler_sf);
 }
@@ -2060,6 +2153,7 @@ vte_sequence_handler_SF (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_so (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	char *standout;
 
 	/* Standout may be mapped to another attribute, so attempt to do
@@ -2095,6 +2189,7 @@ vte_sequence_handler_so (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_sr (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long start, end;
 	VteScreen *screen;
 
@@ -2132,6 +2227,7 @@ vte_sequence_handler_sr (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_SR (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_multiple(terminal, params, vte_sequence_handler_sr);
 }
 
@@ -2139,6 +2235,7 @@ vte_sequence_handler_SR (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_st (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	if (terminal->pvt->tabstops == NULL) {
 		terminal->pvt->tabstops = g_hash_table_new(NULL, NULL);
 	}
@@ -2150,6 +2247,7 @@ vte_sequence_handler_st (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ta (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	long newcol, col;
 
@@ -2250,6 +2348,7 @@ vte_sequence_handler_ta (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_tab_clear (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	long param = 0;
 
@@ -2275,6 +2374,7 @@ vte_sequence_handler_tab_clear (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ts (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->status_line = TRUE;
 	terminal->pvt->screen->status_line_changed = TRUE;
 	g_string_truncate(terminal->pvt->screen->status_line_contents, 0);
@@ -2284,6 +2384,7 @@ vte_sequence_handler_ts (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_uc (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct vte_charcell *cell;
 	int column;
 	VteScreen *screen;
@@ -2319,6 +2420,7 @@ vte_sequence_handler_uc (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ue (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->defaults.attr.underline = 0;
 }
 
@@ -2326,6 +2428,7 @@ vte_sequence_handler_ue (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_up (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	long start, end;
 
@@ -2346,6 +2449,7 @@ vte_sequence_handler_up (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_UP (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_multiple(terminal, params, vte_sequence_handler_up);
 }
 
@@ -2353,6 +2457,7 @@ vte_sequence_handler_UP (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_us (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->screen->defaults.attr.underline = 1;
 }
 
@@ -2360,6 +2465,7 @@ vte_sequence_handler_us (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_vb (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_terminal_visible_beep (terminal);
 }
 
@@ -2367,6 +2473,7 @@ vte_sequence_handler_vb (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_ve (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->cursor_visible = TRUE;
 }
 
@@ -2374,6 +2481,7 @@ vte_sequence_handler_ve (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_vertical_tab (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_index (terminal, params);
 }
 
@@ -2381,6 +2489,7 @@ vte_sequence_handler_vertical_tab (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_vi (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->cursor_visible = FALSE;
 }
 
@@ -2388,6 +2497,7 @@ vte_sequence_handler_vi (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_vs (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	terminal->pvt->cursor_visible = TRUE; /* FIXME: should be *more*
 						 visible. */
 }
@@ -2396,6 +2506,7 @@ vte_sequence_handler_vs (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_character_attributes (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	unsigned int i;
 	GValue *value;
 	long param;
@@ -2562,6 +2673,7 @@ vte_sequence_handler_character_attributes (VteTerminal *terminal, GValueArray *p
 static void
 vte_sequence_handler_cursor_character_absolute (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteScreen *screen;
 	GValue *value;
 	long val;
@@ -2585,6 +2697,7 @@ vte_sequence_handler_cursor_character_absolute (VteTerminal *terminal, GValueArr
 static void
 vte_sequence_handler_cursor_position (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_offset(terminal, params, -1, vte_sequence_handler_cm);
 }
 
@@ -2592,6 +2705,7 @@ vte_sequence_handler_cursor_position (VteTerminal *terminal, GValueArray *params
 static void
 vte_sequence_handler_request_terminal_parameters (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_feed_child(terminal, "\e[?x", -1);
 }
 
@@ -2599,6 +2713,7 @@ vte_sequence_handler_request_terminal_parameters (VteTerminal *terminal, GValueA
 static void
 vte_sequence_handler_return_terminal_status (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_feed_child(terminal, "", 0);
 }
 
@@ -2606,6 +2721,7 @@ vte_sequence_handler_return_terminal_status (VteTerminal *terminal, GValueArray
 static void
 vte_sequence_handler_send_primary_device_attributes (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	/* Claim to be a VT220 with only national character set support. */
 	vte_terminal_feed_child(terminal, "\e[?62;9;c", -1);
 }
@@ -2614,6 +2730,7 @@ vte_sequence_handler_send_primary_device_attributes (VteTerminal *terminal, GVal
 static void
 vte_sequence_handler_return_terminal_id (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_send_primary_device_attributes (terminal, params);
 }
 
@@ -2621,6 +2738,7 @@ vte_sequence_handler_return_terminal_id (VteTerminal *terminal, GValueArray *par
 static void
 vte_sequence_handler_send_secondary_device_attributes (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	char **version;
 	char buf[128];
 	long ver = 0, i;
@@ -2642,12 +2760,14 @@ vte_sequence_handler_send_secondary_device_attributes (VteTerminal *terminal, GV
 static void
 vte_sequence_handler_set_icon_title (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_set_title_internal(terminal, params, TRUE, FALSE);
 }
 
 static void
 vte_sequence_handler_set_window_title (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_set_title_internal(terminal, params, FALSE, TRUE);
 }
 
@@ -2655,6 +2775,7 @@ vte_sequence_handler_set_window_title (VteTerminal *terminal, GValueArray *param
 static void
 vte_sequence_handler_set_icon_and_window_title (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_set_title_internal(terminal, params, TRUE, TRUE);
 }
 
@@ -2662,6 +2783,7 @@ vte_sequence_handler_set_icon_and_window_title (VteTerminal *terminal, GValueArr
 static void
 vte_sequence_handler_set_scrolling_region (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_offset(terminal, params, -1, vte_sequence_handler_cs);
 }
 
@@ -2669,6 +2791,7 @@ vte_sequence_handler_set_scrolling_region (VteTerminal *terminal, GValueArray *p
 static void
 vte_sequence_handler_application_keypad (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_KEYBOARD,
 			"Entering application keypad mode.\n");
 	terminal->pvt->keypad_mode = VTE_KEYMODE_APPLICATION;
@@ -2677,6 +2800,7 @@ vte_sequence_handler_application_keypad (VteTerminal *terminal, GValueArray *par
 static void
 vte_sequence_handler_normal_keypad (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	_vte_debug_print(VTE_DEBUG_KEYBOARD,
 			"Leaving application keypad mode.\n");
 	terminal->pvt->keypad_mode = VTE_KEYMODE_NORMAL;
@@ -2686,11 +2810,13 @@ vte_sequence_handler_normal_keypad (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_character_position_absolute (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_offset(terminal, params, -1, vte_sequence_handler_ch);
 }
 static void
 vte_sequence_handler_line_position_absolute (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_offset(terminal, params, -1, vte_sequence_handler_cv);
 }
 
@@ -2698,6 +2824,7 @@ vte_sequence_handler_line_position_absolute (VteTerminal *terminal, GValueArray
 static void
 vte_sequence_handler_set_mode (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint i;
 	long setting;
 	GValue *value;
@@ -2718,6 +2845,7 @@ vte_sequence_handler_set_mode (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_reset_mode (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	guint i;
 	long setting;
 	GValue *value;
@@ -2738,6 +2866,7 @@ vte_sequence_handler_reset_mode (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_decset (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	long setting;
 	guint i;
@@ -2758,6 +2887,7 @@ vte_sequence_handler_decset (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_decreset (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	long setting;
 	guint i;
@@ -2778,6 +2908,7 @@ vte_sequence_handler_decreset (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_erase_characters (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_ec (terminal, params);
 }
 
@@ -2785,6 +2916,7 @@ vte_sequence_handler_erase_characters (VteTerminal *terminal, GValueArray *param
 static void
 vte_sequence_handler_erase_in_display (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	long param;
 	guint i;
@@ -2826,6 +2958,7 @@ vte_sequence_handler_erase_in_display (VteTerminal *terminal, GValueArray *param
 static void
 vte_sequence_handler_erase_in_line (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	long param;
 	guint i;
@@ -2864,6 +2997,7 @@ vte_sequence_handler_erase_in_line (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_full_reset (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_reset(terminal, TRUE, TRUE);
 }
 
@@ -2871,6 +3005,7 @@ vte_sequence_handler_full_reset (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_insert_blank_characters (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_sequence_handler_IC (terminal, params);
 }
 
@@ -2878,6 +3013,7 @@ vte_sequence_handler_insert_blank_characters (VteTerminal *terminal, GValueArray
 static void
 vte_sequence_handler_insert_lines (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteRowData *rowdata;
 	GValue *value;
 	VteScreen *screen;
@@ -2926,6 +3062,7 @@ vte_sequence_handler_insert_lines (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_delete_lines (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	VteRowData *rowdata;
 	VteScreen *screen;
@@ -2975,6 +3112,7 @@ vte_sequence_handler_delete_lines (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_local_charset (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	G_CONST_RETURN char *locale_encoding;
 	g_get_charset(&locale_encoding);
 	vte_terminal_set_encoding(terminal, locale_encoding);
@@ -2983,6 +3121,7 @@ vte_sequence_handler_local_charset (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_utf_8_charset (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_set_encoding(terminal, "UTF-8");
 }
 
@@ -2991,6 +3130,7 @@ vte_sequence_handler_utf_8_charset (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_device_status_report (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	VteScreen *screen;
 	long param;
@@ -3027,6 +3167,7 @@ vte_sequence_handler_device_status_report (VteTerminal *terminal, GValueArray *p
 static void
 vte_sequence_handler_dec_device_status_report (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	VteScreen *screen;
 	long param;
@@ -3074,6 +3215,7 @@ vte_sequence_handler_dec_device_status_report (VteTerminal *terminal, GValueArra
 static void
 vte_sequence_handler_restore_mode (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	long setting;
 	guint i;
@@ -3094,6 +3236,7 @@ vte_sequence_handler_restore_mode (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_save_mode (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GValue *value;
 	long setting;
 	guint i;
@@ -3115,6 +3258,7 @@ vte_sequence_handler_save_mode (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_screen_alignment_test (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	long row;
 	VteRowData *rowdata, *old_row;
 	VteScreen *screen;
@@ -3161,6 +3305,7 @@ vte_sequence_handler_screen_alignment_test (VteTerminal *terminal, GValueArray *
 static void
 vte_sequence_handler_soft_reset (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	vte_terminal_reset(terminal, FALSE, FALSE);
 }
 
@@ -3170,6 +3315,7 @@ vte_sequence_handler_soft_reset (VteTerminal *terminal, GValueArray *params)
 static void
 vte_sequence_handler_window_manipulation (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	GdkScreen *gscreen;
 	VteScreen *screen;
 	GValue *value;
@@ -3380,6 +3526,7 @@ vte_sequence_handler_window_manipulation (VteTerminal *terminal, GValueArray *pa
 static void
 vte_sequence_handler_change_cursor_color (VteTerminal *terminal, GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	gchar *name = NULL;
 	GValue *value;
 	GdkColor color;
@@ -3429,6 +3576,7 @@ vteseq_n_lookup (register const char *str, register unsigned int len);
 static VteTerminalSequenceHandler
 _vte_sequence_get_handler (const char *name)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int len = strlen (name);
 
 	if (G_UNLIKELY (len < 2)) {
@@ -3452,6 +3600,7 @@ _vte_terminal_handle_sequence(VteTerminal *terminal,
 			      GQuark match G_GNUC_UNUSED,
 			      GValueArray *params)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	VteTerminalSequenceHandler handler;
 
 	_VTE_DEBUG_IF(VTE_DEBUG_PARSE)
diff --git a/src/vteskel.c b/src/vteskel.c
index 274b6de..72643cc 100644
--- a/src/vteskel.c
+++ b/src/vteskel.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2003 Red Hat, Inc.
  *
@@ -31,6 +32,7 @@ static void
 _vte_skel_clear(struct _vte_draw *draw,
 		gint x, gint y, gint width, gint height)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_message ("_vte_skel_clear: %d,%d+%d,%d",
 		   x, y, width, height);
 }
@@ -39,6 +41,7 @@ static void
 _vte_skel_get_text_metrics(struct _vte_draw *draw,
 			   gint *width, gint *height, gint *ascent)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_message ("_vte_skel_get_text_metrics");
 }
 
@@ -47,8 +50,9 @@ _vte_skel_draw_text(struct _vte_draw *draw,
 		    struct _vte_draw_text_request *requests, gsize n_requests,
 		    GdkColor *color, guchar alpha, gboolean bold)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_message ("_vte_skel_draw_text: %d chars",
 		   n_requests);
 }
 
 static void
@@ -56,6 +60,7 @@ _vte_skel_fill_rectangle(struct _vte_draw *draw,
 			 gint x, gint y, gint width, gint height,
 			 GdkColor *color, guchar alpha)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_message ("_vte_skel_fill_rectangle: %d,%d+%d,%d",
 		   x, y, width, height);
 }
diff --git a/src/vtetc.c b/src/vtetc.c
index fe43550..8a03beb 100644
--- a/src/vtetc.c
+++ b/src/vtetc.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright © 2006 Ryan Lortie <desrt@desrt.ca>
  * based on code © 2000-2002 Red Hat, Inc. and others.
@@ -74,6 +75,7 @@ _vte_termcap_strcmp (const char *a,
                      const char *b,
                      const char *enders)
 {
+	//printf ("Entering %s\n", __FUNCTION__);
   /* note: strchr on '\0' returns the
    * end of the string (not NULL)
    */
@@ -113,6 +115,7 @@ _vte_termcap_find_start (VteTermcap *termcap,
                          const char *tname,
                          const char *cap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   const char *contents;
   const char *start;
   char *chain;
@@ -164,6 +167,7 @@ _vte_termcap_find_start (VteTermcap *termcap,
 static int
 _vte_termcap_unescape_string(const char *string, char *result)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   int value = -1;
   int length = 0;
 
@@ -264,6 +268,7 @@ _vte_termcap_find_string_length (VteTermcap *termcap,
                                  const char *cap,
                                  gssize *length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   const char *result = _vte_termcap_find_start (termcap, tname, cap);
   char *string;
 
@@ -289,6 +294,7 @@ _vte_termcap_find_string (VteTermcap *termcap,
                           const char *tname,
                           const char *cap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   gssize length;
 
   return _vte_termcap_find_string_length (termcap, tname, cap, &length);
@@ -299,6 +305,7 @@ _vte_termcap_find_numeric (VteTermcap *termcap,
                            const char *tname,
                            const char *cap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   const char *result = _vte_termcap_find_start (termcap, tname, cap);
   long value;
   char *end;
@@ -320,6 +327,7 @@ _vte_termcap_find_boolean (VteTermcap *termcap,
                            const char *tname,
                            const char *cap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   const char *result = _vte_termcap_find_start (termcap, tname, cap);
 
   if (result == NULL)
@@ -339,6 +347,7 @@ _vte_termcap_find_boolean (VteTermcap *termcap,
 static void
 _vte_termcap_parse_entry (GTree *termcap, const char **cnt, const char *end)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   gboolean seen_content;
   const char *contents;
   const char *start;
@@ -430,6 +439,7 @@ _vte_termcap_parse_entry (GTree *termcap, const char **cnt, const char *end)
 static GTree *
 _vte_termcap_parse_file (const char *contents, int length)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   const char *end = contents + length;
   GTree *termcap;
 
@@ -472,6 +482,7 @@ _vte_termcap_parse_file (const char *contents, int length)
 static VteTermcap *
 _vte_termcap_create (const char *filename)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   const char *contents;
   VteTermcap *termcap;
   GMappedFile *file;
@@ -496,6 +507,7 @@ _vte_termcap_create (const char *filename)
 static void
 _vte_termcap_destroy (VteTermcap *termcap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   g_tree_destroy (termcap->tree);
   g_mapped_file_free (termcap->file);
   g_slice_free (VteTermcap, termcap);
@@ -510,6 +522,7 @@ static GCache *_vte_termcap_cache = NULL;
 VteTermcap *
 _vte_termcap_new(const char *filename)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   VteTermcap *result;
 
   g_static_mutex_lock (&_vte_termcap_mutex);
@@ -531,6 +544,7 @@ _vte_termcap_new(const char *filename)
 void
 _vte_termcap_free (VteTermcap *termcap)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   g_static_mutex_lock (&_vte_termcap_mutex);
   g_cache_remove (_vte_termcap_cache, termcap);
   g_static_mutex_unlock (&_vte_termcap_mutex);
@@ -542,6 +556,7 @@ _vte_termcap_free (VteTermcap *termcap)
 int
 main (int argc, char **argv)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   VteTermcap *tc;
   char *str;
   gssize len;
diff --git a/src/vtetree.c b/src/vtetree.c
index c2b8054..f954337 100644
--- a/src/vtetree.c
+++ b/src/vtetree.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2004 Benjamin Otte <otte@gnome.org>
  *
@@ -23,6 +24,7 @@
 VteTree *
 _vte_tree_new(GCompareFunc key_compare_func)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   VteTree *tree = g_slice_new0 (VteTree);
   tree->tree = g_tree_new (key_compare_func);
   return tree;
@@ -31,6 +33,7 @@ _vte_tree_new(GCompareFunc key_compare_func)
 void 
 _vte_tree_destroy(VteTree *tree)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   g_tree_destroy (tree->tree);
   g_slice_free (VteTree, tree);
 }
@@ -38,6 +41,7 @@ _vte_tree_destroy(VteTree *tree)
 void 
 _vte_tree_insert(VteTree *tree, gpointer key, gpointer value)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   guint index = GPOINTER_TO_UINT (key);
   
   if (index < VTE_TREE_ARRAY_SIZE) {
@@ -50,6 +54,7 @@ _vte_tree_insert(VteTree *tree, gpointer key, gpointer value)
 gpointer
 _vte_tree_lookup(VteTree *tree, gconstpointer key)
 {
+	printf ("Entering %s\n", __FUNCTION__);
   const guint index = GPOINTER_TO_UINT (key);
   
   if (index < VTE_TREE_ARRAY_SIZE)
diff --git a/src/vteunistr.c b/src/vteunistr.c
index 5451e45..403acbb 100644
--- a/src/vteunistr.c
+++ b/src/vteunistr.c
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*
  * Copyright (C) 2008 Red Hat, Inc.
  *
@@ -95,6 +96,7 @@ GHashTable *unistr_comp;
 static guint
 unistr_comp_hash (gconstpointer key)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct VteUnistrDecomp *decomp;
 	decomp = &DECOMP_FROM_INDEX (GPOINTER_TO_UINT (key));
 	return decomp->prefix ^ decomp->suffix;
@@ -103,6 +105,7 @@ unistr_comp_hash (gconstpointer key)
 static gboolean
 unistr_comp_equal (gconstpointer a, gconstpointer b)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	return 0 == memcmp (&DECOMP_FROM_INDEX (GPOINTER_TO_UINT (a)),
 			    &DECOMP_FROM_INDEX (GPOINTER_TO_UINT (b)),
 			    sizeof (struct VteUnistrDecomp));
@@ -111,6 +114,7 @@ unistr_comp_equal (gconstpointer a, gconstpointer b)
 vteunistr
 _vte_unistr_append_unichar (vteunistr s, gunichar c)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	struct VteUnistrDecomp decomp;
 	vteunistr ret = 0;
 
@@ -144,6 +148,7 @@ _vte_unistr_append_unichar (vteunistr s, gunichar c)
 gunichar
 _vte_unistr_get_base (vteunistr s)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_val_if_fail (s < unistr_next, s);
 	while (G_UNLIKELY (s >= VTE_UNISTR_START))
 		s = DECOMP_FROM_UNISTR (s).prefix;
@@ -153,6 +158,7 @@ _vte_unistr_get_base (vteunistr s)
 void
 _vte_unistr_append_to_string (vteunistr s, GString *gs)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	g_return_if_fail (s < unistr_next);
 	if (G_UNLIKELY (s >= VTE_UNISTR_START)) {
 		struct VteUnistrDecomp *decomp;
@@ -166,6 +172,7 @@ _vte_unistr_append_to_string (vteunistr s, GString *gs)
 static int
 _vte_unistr_strlen (vteunistr s)
 {
+	printf ("Entering %s\n", __FUNCTION__);
 	int len = 1;
 	g_return_val_if_fail (s < unistr_next, len);
 	while (G_UNLIKELY (s >= VTE_UNISTR_START)) {
